---
title: "Introduction II"
---

# Handling Data Structures in RStudio

## Learning objectives

By the end of this tutorial, you will be able to:

1. Set your working directory on Mac and Windows
2. Import a .csv file into RStudio
3. Understand the structure of a data frame (rows and columns)
4. Filter data using both numeric and categorical variables
5. Combine multiple conditions with logical operators to perform further filtering of data
6. Export data back into a .csv file

These objectives, combined with those from last week, serve as a gateway to learning RStudio and building a strong foundation. Let us begin!

## Setting the Working Directory to Datasets

:::{.callout-warning}
Before we do anything - make sure to have downloaded the dataset for this computer session by clicking [**[HERE]**](). There are three datasets:

1. `Primary Schools in Ealing.csv`: This comma separated values (CSV) file contains the data needed to follow today's tutorial.
2 `Open Street Drains in Accra`: This is zipped folder containing images of stormwater drainage infrastructure in Accra annotated with key information to created a data frame. It will be needed in part one of **Task 1**.
3. `Prevalence of Soil Transmitted Helminths in Africa.csv`: This dataset contains point locations for villages across sub-Saharan Africa. It will be needed in part two of **Task 1**.

**Instructions**
In your computer, do the following:

1. Create a new folder on your desktop and rename the folder **GEOG0186**
2. Next, create a new sub-folder within **GEOG0186** and rename it as **Week 2**.
3. From the downloaded folder **Dataset for Week 2**, make sure to unzip and transfer **ALL** the datasets directly to the **Week 2** folder.
:::

This part is probably the most important section of this tutorial.We are going to learn how to set the **Work Directory**. This basically refers to us connecting the RStudio to the folder containing our dataset that we want to import and analyse. 

Doing this allows the user to tell RStudio to open data from a folder located somewhere in our computer using something called the **Path Location**. 

The **Path Location** specifies the whereabouts of the data file(s) stored within a computer. Setting your directory in RStudio, **in code**, beforehand makes life incredibly easier (than the usual point-and-click approach) in terms of finding, importing, exporting and saving data in and out of RStudio.

To illustrate what a **Path Location** is – suppose on my desktop's dashboard on a Mac/Windows there is a folder called **GEOG0186**, and within that folder, exists another folder called **Week 2**. Finally, suppose a comma separated value (.csv) data file called `Primary Schools in Ealing.csv` is store in this folder i.e., **Week 2**. If via RStudio you want to open this CSV data file located in within the **Week 2** folder. You will need to first set the path to **Week 2** in RStudio using the `setwd()` function.

### Setting the Path Location on MAC

For **MAC** users, the path location would be written as follows, `"/Users/accountName/Desktop/GEOG0186/Workshop 1"`. You can access this piece of information simply by:

1. Open the folder **GEOG0186**
2. Right-clicking on the folder **Week 2** in which the files are stored. A drop-down scroll menu will appear (see image below).

```{r echo=FALSE, out.width = "100%", fig.align='center', cache=TRUE,}
knitr::include_graphics('assets/all_images/set_working_directory/00_setwd_mac.png', error = FALSE) 
```

3. Hold the **Option** (`⌥`) button on your keyboard down, and click **Copy "Week 2" as Pathname**
4. Paste the copied path name into the function `setwd()` and run the code

For Mac, the `setwd()` is as follows:

```{r, eval=FALSE}
# set work directory in macs
setwd("/Users/accountName/Desktop/GEOG0186/Week 2")
```

### Setting the Path Location on Windows

For Windows user, its marginally different - the path location to this folder on a **Windows** machine would be written as follows, `"C:/Users/accountName/Desktop/GEOG00186/Week 2"`. You can access this piece of information simply by:

1. Open the **GEOG0186** folder to reveal the **Week 2** folder.
2. Open the **Week 2** folder where your downloaded data files have been stored.
3. Now, click on the browser bar at the top which shows `GEOG0186 > Week 2`. This should highlight and show `"C:\Users\accountName\Desktop\GEOG0186\Week 2"` (see image below).

```{r echo=FALSE, out.width = "100%", fig.align='center', cache=TRUE,}
knitr::include_graphics('assets/all_images/set_working_directory/00_setwd_windows.png', error = FALSE) 
```

4. Now, copy `"C:\Users\accountName\Desktop\GEOG0186\Week 2"` and paste the path name into the `setwd()` function in your R script.
5. Lastly, change all the back slashes `\` in the path name to forward slashes `/` and run the code. It should look like this: `setwd("C:/Users/accountName/Desktop/GEOG0186/Week 2")`.

For **Windows**, the `setwd()` is as follows:

```{r, eval=FALSE}
# set work directory in windows
setwd("C:/Users/accountName/Desktop/GEOG0013/Week 2")
```

If you type the code `getwd()` and quickly run it through console - if it returns the inputted path location - then you have done this correctly.

Now, let us learn how to import a CSV data into RStudio.

## How to Import a Dataset into RStudio

A CSV file (short for Comma-Separated Values) is one of the most common formats for storing data.
Each **row** is a **single record** or **observation**. For example, it can be details about a person, household unit, a city, or even disease events; and while each **column** is a **variable** (for example, population counts, temperature readings, or region name etc.).

For this exercise, we will be using the `Primary Schools in Ealing.csv` dataset to build intuition on understanding the basics of data structure.

Since, we have already set the work directory to folder containing this dataset. Importing it into RStudio would be a piece of cake.

To read a CSV file into R, we can use the `read.csv()` function import it as a **data frame object**:

```{r setup, include = FALSE}
knitr::opts_knit$set(root.dir = "/Users/anwarmusah/Documents/Websites/GEOG0186/datasets/All Data")
knitr::opts_chunk$set(cache = TRUE)
```

```{r}
# Load data into RStudio. The spreadsheet is stored in the object called 'school_data'
school_data <- read.csv(file = "Primary Schools in Ealing.csv")
```

The loaded dataset contains up to 58 primary schools with the following **variables**:

- `SchoolName`: Name of school in Ealing (**character**)
- `Type`: School classified as a "Primary" school (**character**)
- `NumberBoys`: Total number of boys in a primary school (**integer**/)
- `NumberGirls`: Total number of girls in a primary school (**integer**)
- `TotalStudents`: Total number of students in a primary school (**integer**)
- `OfstedGrade`: Overall school performance where `1` = "excellent", `2` = "good", `3` = "requires improvement", and `4` = "inadequate" (**factor**/**categorical**)

:::{.callout-important}
We have covered a lot of the basics in RStudio - i.e., setting the work directory and importing a spreadsheet that is CSV format. The things shown in this section will be used frequently in all future tutorials. So, get used to using `setwd()` and `read.csv()`.
:::

## Data Structure

### Inspecting the Size and Structure

One can examine the structure of the imported data with the following basic functions.

- `str()`: tells the user which columns in the data frame are character or numeric variables, and so on.
- `names()`: prints the entire names of the columns present in the data frame
- `head()`: allows the user to see the first top 10 rows of the data frame
- `tail()`: allows the user to see the last bottom 10 rows of the data frame
- `ncol()`: tells the user the total number of columns present in the data frame
- `nrow()`: tells the user the total number of observations (or rows) present in the data frame
- `dim()`: prints both the total number of observations (or rows) and columns present in the data frame.

Using the following code `str()` will display the structure of `school_data` data frame object and some of its contents:

```{r}
str(school_data)
```

Using the following code `head()` or `tail()` will display the first or last 10 observations, respectively, in the `school_data` data frame object:

```{r, max.height='100px'}
head(school_data)
tail(school_data)
```

You can inspect the data frame object in a **Data viewer** by using the `View()` syntax. This should cause the **Data viewer** window to open showing the full dataset:

```{r, eval=FALSE}
View(school_data)
```

The dataset has 58 rows (primary school observations) and 6 columns (variables). You can use `nrow`, `ncol` and `dim()` functions separately to report the size of your data frame: 

```{r}
# total number of rows
nrow(school_data)

# total number of columns
ncol(school_data)

# full size of data frame i.e., total rows and columns
dim(school_data)
```

### Basic Subsetting and Manipulation of Data Frame
