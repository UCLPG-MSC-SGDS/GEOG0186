[
  {
    "objectID": "00-module_overview.html#getting-started-with-the-learning-materials-length-001351",
    "href": "00-module_overview.html#getting-started-with-the-learning-materials-length-001351",
    "title": "GEOG0186: Quantitative Skills",
    "section": "Getting Started with the Learning Materials (Length: 00:13:51)",
    "text": "Getting Started with the Learning Materials (Length: 00:13:51)\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]",
    "crumbs": [
      "Module Overview",
      "Welcome"
    ]
  },
  {
    "objectID": "00-module_overview.html#self-guided-flipped-learning-approach",
    "href": "00-module_overview.html#self-guided-flipped-learning-approach",
    "title": "GEOG0186: Quantitative Skills",
    "section": "Self-Guided & Flipped Learning Approach",
    "text": "Self-Guided & Flipped Learning Approach\nThis strand follows a more relaxed teaching structure. You will work independently at your own pace, with guidance provided along the way. We expect you to engage with the learning materials - supported by online tutorials, coding instructions, and guidance videos - before going into the computer practical sessions. This allows our session time to be used for discussion, problem-solving, and hands-on practice.",
    "crumbs": [
      "Module Overview",
      "Welcome"
    ]
  },
  {
    "objectID": "00-module_overview.html#computer-practical-sessions-timetable",
    "href": "00-module_overview.html#computer-practical-sessions-timetable",
    "title": "GEOG0186: Quantitative Skills",
    "section": "Computer Practical Sessions & Timetable",
    "text": "Computer Practical Sessions & Timetable\nThere are 10 computer practical sessions throughout Term 1, all delivered in-person and facilitated by Postgraduate Teaching Assistants (PGTAs).\nAll sessions take place every Wednesday between 9:00am and 12:00pm. The entire Geography cohort has been split into three groups (Computer Groups A, B, and C), with practicals delivered separately in one-hour, back-to-back sessions each week to each group. The schedule is as follows:\n\nGroup A: 09:00am–10:00am, Christopher Ingold Building G20 – Public Cluster\nGroup B: 10:00am–11:00am, Birkbeck Malet Street 422/423 – Public Cluster\nGroup C: 11:00am–12:00pm, Birkbeck Malet Street 422/423 – Public Cluster\n\n\n\n\n\n\n\nImportant\n\n\n\nThe above locations for Group A, B, and C are public clusters with PC workstations. Since you will mostly be working through the materials at your own pace, often on your own laptops with RStudio installed, we highly recommend that you bring your own laptop to the computer practicals for ease of use.\n\n\nThe topics for the course are as follows:\n\n\n\n\n\n\n\n\nDates\nWeek\nList of Topics\n\n\n\n\n01/10/25\n1\nIntroduction I: Basics Building Blocks for Computing in RStudio\n\n\n08/10/25\n2\nIntroduction II: Handling Data Structures in RStudio\n\n\n15/10/25\n3\nExamining I: Frequency Distribution\n\n\n22/10/25\n4\nExamining II: Descriptive Statistics\n\n\n29/10/25\n5\nExamining III: Types of Data Visualisation\n\n\n\n\nReading Week\n\n\n12/11/25\n6\nSourcing Data I: Acquiring Data From Open Sources\n\n\n19/11/25\n7\nSourcing Data II: Sampling from Probability Distribution\n\n\n26/11/25\n8\nAir Quality I: Correlation & Regression\n\n\n03/12/25\n9\nAir Quality II: Box Plots and T-tests\n\n\n10/12/25\n10\nPortfolio Surgery & Wrap-up.",
    "crumbs": [
      "Module Overview",
      "Welcome"
    ]
  },
  {
    "objectID": "00-module_overview.html#questions-discusson-forum-on-moodle",
    "href": "00-module_overview.html#questions-discusson-forum-on-moodle",
    "title": "GEOG0186: Quantitative Skills",
    "section": "Questions & Discusson Forum on Moodle",
    "text": "Questions & Discusson Forum on Moodle\nOn Moodle, you can use the Ask a question section to post general queries about the learning materials on this website, as well as any technical issues you encounter during your self-guided study. Please refer to that section on Moodle, and either I or one of the PGTAs will respond with solutions.\n\n\n\n\n\n\nImportant\n\n\n\nWhile Moodle is the central point for information and communications for GEOG0186 Quantitative Skills and where all formative assessments are submitted. However, note that all the weekly content will only be hosted on this dedicated web page and not on Moodle.",
    "crumbs": [
      "Module Overview",
      "Welcome"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html",
    "href": "02-basic_building_blocks.html",
    "title": "Introduction I",
    "section": "",
    "text": "The learning objectives for today are:\n\nBecome familiar with the user interface in RStudio\nPractice basic coding in the R Console\nOpen an R script and create basic objects in RStudio\nUnderstand different data types\nData entry and variable creation in RStudio\n\nThese objectives serve as a gateway to learning RStudio and building a strong foundation. Let us begin!\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nWhen you open RStudio for the first time, you are greeted by its interface. The window is divided into three panels:\n\nR Console\nEnvironment\nFiles, Help, and Output\n\n\n\n\n\n\n\n\n\n\n\nPanel 1: The R Console allows you to type R code to perform quick commands and basic calculations. It also reports whether code executions from scripts are successful or have failed.\nPanel 2: The Environment shows the objects currently stored in RStudio’s memory, such as values, vectors, data frames, and spatial objects.\nPanel 3: This panel contains several tabs. The most important are: (i) Files: access folders on your computer to open datasets; (ii) Help: view help documentation for functions and commands; and (iii) Plots: review the plots you generate (e.g., histograms, scatterplots, maps).\n\nThe section at the top of RStudio is the Menu Bar. From here, you can access functions for saving, editing, and opening a new Script File. Opening a new Script File reveals a fourth panel above the Console.\nYou can open a Script File by:\n\nClicking on the File tab in the Menu Bar. A drop-down menu will appear. Scroll to New File. Under New File, click R Script. This opens a new script titled Untitled 1.\n\n\n\n\n\n\n\nImportant\n\n\n\nThroughout the course, and in all practical tutorials, you will be encouraged to use an R Script to collate and save the code you write for any statistical or spatial analysis. However, we will only begin working with scripts in section 1.4 of the tutorials. For now, let’s start with the absolute basics: interacting with the R Console and using it as a simple calculator for typing basic code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nThe R Console window (Panel 1) is where RStudio waits for you to tell it what to do. It displays the code you enter and the results of each command. You can type commands directly into this window for immediate execution.\nLet’s begin by using the Console as a basic calculator for addition (+), subtraction (-), multiplication (*), division (/), exponents (^), and other calculations.\nClick inside the R Console window, type 19+8, and press the Enter key (↵) to see the result. Then try the following calculations by typing them into the Console:\n\n# Perform addition\n19+8\n\n# Perform subtraction\n20-89\n\n# Perform multiplication\n18*20\n\n# Perform division\n27/3\n\n# To number to a power e.g., 2 raise to the power of 8\n2^8\n\n# Perform complex sums\n(5*(170-3.405)/91)+1002\n\n\n\n\n\n\n\nImportant\n\n\n\nThe text that follows a hash symbol # in the code chunk is a comment, not actual code. It explains what the line of code without the # is doing.\n\n\nIn addition to basic arithmetic operations, we can also use common mathematical functions such as exponentials and logarithms:\n\nexp() calculates the exponential\nlog() calculates the logarithm\n\nDo not worry about fully understanding these functions for now as you will likely use them later in Weeks 8 and 9 when transforming variables.\nTry the following by typing them into the R Console window:\n\n# use exp() to apply an exponential to a value\nexp(5) \n\n# use log() to transforrm a value on to a logarithm scale\nlog(3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nLet’s open an R Script file!\nNow that we are familiar with using the Console as a calculator, let’s build on this and learn one of the most important features in R: the Assignment Operator.\nThe arrow symbol &lt;- is called the Assignment Operator. You type it by pressing the less-than symbol &lt; followed by the hyphen -. It allows you to assign values to an object in R.\nObjects are stored quantities in RStudio’s environment. They can hold anything from numeric values to character strings. For example, to create a numeric object called x and assign it the value 3, type: x &lt;- 3. When you enter x in the Console and press Enter (↵), R will return the numeric value 3.\nSimilarly, to create a string object called y and assign it the text \"Hello!\", type: y &lt;- \"Hello!\" When you enter y in the Console, it will return the text value Hello!.\nNow, let’s create the objects a, b, c, and d and assign them numeric values. Perform the following by typing them into the R Console:\n\n# Create an object called 'a' and assign the value 17 to it\na &lt;- 17\n\n# Type the object 'a' in console as a command to return value 17\na\n\n# Create an object called 'b' and assign the value 10 to it\nb &lt;- 10\n\n# Type the object 'b' in console as a command to return value 10\nb\n\n# Create an object called 'c' and assign the value 9 to it\nc &lt;- 9\n\n# Type the object 'c' in console as a command to return value 9\nc\n\n# Create an object called 'd' and assign the value 8 to it\nd &lt;- 8\n\n# Type the object 'd' in console as a command to return value 8\nd\n\nNotice how the objects a, b, c and d and its value are listed and stored in RStudio’s environment panel. We can perform the following maths operations with these object values:\n\n# type the following and return an answer\n(a + b + c + d)/5\n\n# type the following and return an answer\n(5*(a-c)/d)^2\n\nLet us create more objects but this time we will assign character string(s) to them. Please note that when typing a string of characters as data you will need to cover them with quotation marks \"...\". For example, say we want to create a string object called y and assign it with some text \"Hello!\". We do this by typing y &lt;- \"Hello!\".\nTry these examples of assigning the following character text to an object:\nLet’s create more objects, but this time we will assign character strings to them. When typing a string of characters as data, you must enclose them in quotation marks \"...\".\nFor example, to create a string object called y and assign it the text \"Hello!\", type: y &lt;- \"Hello!\"\nTry the following examples to assign character text to objects:\n\n# Create an object called 'e' and assign the character string \"RStudio\"\ne &lt;- \"RStudio\"\n\n# Type the object 'e' in the console as a command to return \"RStudio\"\ne\n\n# Create an object called 'f', assign character string \"Hello world\" \nf &lt;- \"Hello world\"\n\n# Type the object 'f' in the console as a command to return \"Hello world\"\nf\n\n# Create an object called 'g' and assign \"Blade Runner is amazing\"\ng &lt;- \"Blade Runner is amazing\"\n\n# Type the object 'g' in the console to return the result\ng\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nIn programming, variables are used to store information, and each has a type determined by the kind of data it holds (e.g., integer, character, factor, logical). Assigning an integer makes the variable type “int.” A variable is simply a reserved memory location where values are stored.\nTo use R effectively, you need a solid understanding of its basic data types, data structures, and how to work with them.\nR has a range of data types. The most common ones are:\n\nnumeric (whole, real or decimal)\nlogical\ncharacter\nfactor\n\nBelow are some basic examples of data points that are classed as character, numeric, or integer values, etc.\n\ncharacter: “a”, “swc”\nnumeric: 2.0, 15.5\nlogical: TRUE, FALSE\nfactor: 2 levels “boy”, “girl” (text categories with assigned numbers as a label)\n\nYou can use the class function i.e., class() on any object to identify its data type. For example, using the class() function on existing objects we created early on (i.e., e and f) in section 1.4 tells us that its a character object.\n\ne &lt;- \"RStudio\"\nf &lt;- \"Hello world\"\n\n\nclass(f)\n\n[1] \"character\"\n\nclass(e)\n\n[1] \"character\"\n\n\nAnother example, using the class() function on existing objects we created early on (i.e., a and b) in section 1.4 tells us that its a numeric object.\n\na &lt;- 17\nb &lt;- 10\n\n\nclass(a)\n\n[1] \"numeric\"\n\nclass(b)\n\n[1] \"numeric\"\n\n\nWe are now familiar with using the console and assigning numeric and string to objects, and identifying their data type. Let’s learn who to enter data into RStudio and create our first data frame.\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nHere, we will learn some basics coding etiquettes creating a dataset from scratch using the two functions:\n\nc() combine function\ndata.frame(): data frame function\n\nAs you have already seen, RStudio is an object-oriented software package and so entering data is slightly different from the usual way of inputting information into a spreadsheet (e.g., Microsoft Excel). Here, you will need to enter the information as a Vector object before combining them into a Data Frame object.\nConsider this crude example of data containing the additional health information for 4 people. It contains the variable (or column) names id, name, height, weight and gender.\n\n\n\nid\nname\nheight\nweight\ngender\n\n\n\n\n1\nKofi\n1.65\n64.2\nM\n\n\n2\nHarry\n1.77\n80.3\nM\n\n\n3\nHuijun\n1.70\n58.7\nF\n\n\n4\nFatima\n1.68\n75.0\nF\n\n\n\nNow, when entering data to RStudio it is not like Microsoft Excel where we enter data into the cells of a spreadsheet. In RStudio, data is entered as a sequence of elements and listed inside an object called a vector.\nFor instance, if we have three age values of 12, 57 and 26 years, and we want to enter this in RStudio in that order, we need to use the combine function c() and combine these three elements into a vector object. Hence, the code will be c(12, 57, 26). We can assign this data by typing this code as age &lt;- c(12, 57, 26). Any time you type age into RStudio’s console it will hence return these three values as a vector unless you chose to overwrite it with different information.\nLet us look at this more closely with the id variable in the above data. Each person has a unique ID number from 1 to 4. We are going to list the numbers 1, 2, 3 and 4 as a sequence of elements into a vector using the combine function c() and then assign it as a vector object calling it id.\n\n# Create 'id' vector object \nid &lt;- c(1, 2, 3, 4)\n\n# Type the vector object 'id' in console to see output or press the 'run' button\nid\n\n[1] 1 2 3 4\n\n\nNow, let us enter the information the same way for the remaining columns for name, height, weight and gender like we did for id:\n\n# Create 'name' vector object\nname &lt;- c(\"Kofi\", \"Harry\", \"Huijun\", \"Fatima\")\nname\n\n[1] \"Kofi\"   \"Harry\"  \"Huijun\" \"Fatima\"\n\n# Create 'height' (in meters) vector object\nheight &lt;- c(1.65, 1.77, 1.70, 1.68)\nheight\n\n[1] 1.65 1.77 1.70 1.68\n\n# Create 'weight' (in kg) vector object\nweight &lt;- c(64.2, 80.3, 58.7, 75.0)\nweight\n\n[1] 64.2 80.3 58.7 75.0\n\n# Create 'gender' vector object\ngender &lt;- c(\"M\", \"M\", \"F\", \"F\")\ngender\n\n[1] \"M\" \"M\" \"F\" \"F\"\n\n\nNow, that we have the vector objects ready. Let us bring them together to create a proper dataset. This new object is called a Data frame. We need to list the vectors inside the data.frame() function. For example:\n\n# Create a dataset (data frame)\ndataset &lt;- data.frame(id, name, height, weight, gender)\n\n# Type the data frame object 'dataset' in console to print the output in console\ndataset\n\n  id   name height weight gender\n1  1   Kofi   1.65   64.2      M\n2  2  Harry   1.77   80.3      M\n3  3 Huijun   1.70   58.7      F\n4  4 Fatima   1.68   75.0      F\n\n\nYou can also see dataset in a data viewer, by using the View() function to see in a spreadsheet:\n\nView(dataset)\n\n\n\n\n\n\n\nImportant\n\n\n\nThe column ‘id’ is a numeric variable with integers. The second column ‘name’ is a text variable with strings. The third & fourth columns ‘height’ and ‘weight’ are examples of numeric variables with real numbers with continuous measures. The variable ‘gender’ is a text variable with strings – however, this type of variable is classed as a categorical variable as individuals were categorised as either ‘M’ and ‘F’.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nTo access a variable by its name within a data frame, you will need to first type the name of the data frame followed by a $ (dollar sign), and then typing the variable’s name of interest. For instance, suppose you just want to see the height values in the Console viewer - you just type:\n\n# to access height - you need to type 'dataset$height'\ndataset$height\n\n[1] 1.65 1.77 1.70 1.68\n\n\nWe can use other columns or variables within our data frame to create another variable. This technique is essentially important when cleaning and managing data. From this dataset, it is possible to derive the body mass index bmi from height and weight using the formula:\n\n\\(BMI = weight/height^2\\)\n\nTo generate bmi into our data frame, we would need to access the height (m) and weight (kg) columns using the $ from the data frame its stored to, and apply the above formula as a code to generate the new bmi column:\n\n# Create 'bmi' in the data frame i.e.,'dataset' and calculate 'bmi'\n# using the $weight and $height\ndataset$bmi &lt;- dataset$weight/((dataset$height)^2)\n# View the data frame ‘dataset’ and you will see the new bmi variable inside\nView(dataset)\n\nYou can overwrite the height (m) column to change its units into centimeters by multiplying it to 100; equally, the weight (kg) column can be overwritten and converted from units of kilograms to grams by multiplying it to 1000.\n\n# using $height and *100 \ndataset$height &lt;- dataset$height*100\n# using $weight and *100\ndataset$weight &lt;- dataset$weight*1000\n# view updated dataset\ndataset\n\n  id   name height weight gender      bmi\n1  1   Kofi    165  64200      M 23.58127\n2  2  Harry    177  80300      M 25.63120\n3  3 Huijun    170  58700      F 20.31142\n4  4 Fatima    168  75000      F 26.57313\n\n\n\n\n\nWell done! You have learnt the basics of coding in RStudio - next week, we will learn further coding etiquettes for managing datasets which includes:\n\nImporting & exporting spreadsheets with RStudio\nSetting up work directories\nRow and column manipulations\nMerging two data frames.\n\nYou can now save your script for future use by clicking on the save icon in the menu bar.",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#learning-objectives",
    "href": "02-basic_building_blocks.html#learning-objectives",
    "title": "Introduction I",
    "section": "",
    "text": "The learning objectives for today are:\n\nBecome familiar with the user interface in RStudio\nPractice basic coding in the R Console\nOpen an R script and create basic objects in RStudio\nUnderstand different data types\nData entry and variable creation in RStudio\n\nThese objectives serve as a gateway to learning RStudio and building a strong foundation. Let us begin!",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#rstudio-interface-length-000708",
    "href": "02-basic_building_blocks.html#rstudio-interface-length-000708",
    "title": "Introduction I",
    "section": "",
    "text": "[Watch on YouTube]\nWhen you open RStudio for the first time, you are greeted by its interface. The window is divided into three panels:\n\nR Console\nEnvironment\nFiles, Help, and Output\n\n\n\n\n\n\n\n\n\n\n\nPanel 1: The R Console allows you to type R code to perform quick commands and basic calculations. It also reports whether code executions from scripts are successful or have failed.\nPanel 2: The Environment shows the objects currently stored in RStudio’s memory, such as values, vectors, data frames, and spatial objects.\nPanel 3: This panel contains several tabs. The most important are: (i) Files: access folders on your computer to open datasets; (ii) Help: view help documentation for functions and commands; and (iii) Plots: review the plots you generate (e.g., histograms, scatterplots, maps).\n\nThe section at the top of RStudio is the Menu Bar. From here, you can access functions for saving, editing, and opening a new Script File. Opening a new Script File reveals a fourth panel above the Console.\nYou can open a Script File by:\n\nClicking on the File tab in the Menu Bar. A drop-down menu will appear. Scroll to New File. Under New File, click R Script. This opens a new script titled Untitled 1.\n\n\n\n\n\n\n\nImportant\n\n\n\nThroughout the course, and in all practical tutorials, you will be encouraged to use an R Script to collate and save the code you write for any statistical or spatial analysis. However, we will only begin working with scripts in section 1.4 of the tutorials. For now, let’s start with the absolute basics: interacting with the R Console and using it as a simple calculator for typing basic code.",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#using-r-console-as-a-calculator-length-000726",
    "href": "02-basic_building_blocks.html#using-r-console-as-a-calculator-length-000726",
    "title": "Introduction I",
    "section": "",
    "text": "[Watch on YouTube]\nThe R Console window (Panel 1) is where RStudio waits for you to tell it what to do. It displays the code you enter and the results of each command. You can type commands directly into this window for immediate execution.\nLet’s begin by using the Console as a basic calculator for addition (+), subtraction (-), multiplication (*), division (/), exponents (^), and other calculations.\nClick inside the R Console window, type 19+8, and press the Enter key (↵) to see the result. Then try the following calculations by typing them into the Console:\n\n# Perform addition\n19+8\n\n# Perform subtraction\n20-89\n\n# Perform multiplication\n18*20\n\n# Perform division\n27/3\n\n# To number to a power e.g., 2 raise to the power of 8\n2^8\n\n# Perform complex sums\n(5*(170-3.405)/91)+1002\n\n\n\n\n\n\n\nImportant\n\n\n\nThe text that follows a hash symbol # in the code chunk is a comment, not actual code. It explains what the line of code without the # is doing.\n\n\nIn addition to basic arithmetic operations, we can also use common mathematical functions such as exponentials and logarithms:\n\nexp() calculates the exponential\nlog() calculates the logarithm\n\nDo not worry about fully understanding these functions for now as you will likely use them later in Weeks 8 and 9 when transforming variables.\nTry the following by typing them into the R Console window:\n\n# use exp() to apply an exponential to a value\nexp(5) \n\n# use log() to transforrm a value on to a logarithm scale\nlog(3)",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#creating-basic-objects-and-assignment-operator-length-001259",
    "href": "02-basic_building_blocks.html#creating-basic-objects-and-assignment-operator-length-001259",
    "title": "Introduction I",
    "section": "",
    "text": "[Watch on YouTube]\nLet’s open an R Script file!\nNow that we are familiar with using the Console as a calculator, let’s build on this and learn one of the most important features in R: the Assignment Operator.\nThe arrow symbol &lt;- is called the Assignment Operator. You type it by pressing the less-than symbol &lt; followed by the hyphen -. It allows you to assign values to an object in R.\nObjects are stored quantities in RStudio’s environment. They can hold anything from numeric values to character strings. For example, to create a numeric object called x and assign it the value 3, type: x &lt;- 3. When you enter x in the Console and press Enter (↵), R will return the numeric value 3.\nSimilarly, to create a string object called y and assign it the text \"Hello!\", type: y &lt;- \"Hello!\" When you enter y in the Console, it will return the text value Hello!.\nNow, let’s create the objects a, b, c, and d and assign them numeric values. Perform the following by typing them into the R Console:\n\n# Create an object called 'a' and assign the value 17 to it\na &lt;- 17\n\n# Type the object 'a' in console as a command to return value 17\na\n\n# Create an object called 'b' and assign the value 10 to it\nb &lt;- 10\n\n# Type the object 'b' in console as a command to return value 10\nb\n\n# Create an object called 'c' and assign the value 9 to it\nc &lt;- 9\n\n# Type the object 'c' in console as a command to return value 9\nc\n\n# Create an object called 'd' and assign the value 8 to it\nd &lt;- 8\n\n# Type the object 'd' in console as a command to return value 8\nd\n\nNotice how the objects a, b, c and d and its value are listed and stored in RStudio’s environment panel. We can perform the following maths operations with these object values:\n\n# type the following and return an answer\n(a + b + c + d)/5\n\n# type the following and return an answer\n(5*(a-c)/d)^2\n\nLet us create more objects but this time we will assign character string(s) to them. Please note that when typing a string of characters as data you will need to cover them with quotation marks \"...\". For example, say we want to create a string object called y and assign it with some text \"Hello!\". We do this by typing y &lt;- \"Hello!\".\nTry these examples of assigning the following character text to an object:\nLet’s create more objects, but this time we will assign character strings to them. When typing a string of characters as data, you must enclose them in quotation marks \"...\".\nFor example, to create a string object called y and assign it the text \"Hello!\", type: y &lt;- \"Hello!\"\nTry the following examples to assign character text to objects:\n\n# Create an object called 'e' and assign the character string \"RStudio\"\ne &lt;- \"RStudio\"\n\n# Type the object 'e' in the console as a command to return \"RStudio\"\ne\n\n# Create an object called 'f', assign character string \"Hello world\" \nf &lt;- \"Hello world\"\n\n# Type the object 'f' in the console as a command to return \"Hello world\"\nf\n\n# Create an object called 'g' and assign \"Blade Runner is amazing\"\ng &lt;- \"Blade Runner is amazing\"\n\n# Type the object 'g' in the console to return the result\ng",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#how-to-identify-data-types-length-000829",
    "href": "02-basic_building_blocks.html#how-to-identify-data-types-length-000829",
    "title": "Introduction I",
    "section": "",
    "text": "[Watch on YouTube]\nIn programming, variables are used to store information, and each has a type determined by the kind of data it holds (e.g., integer, character, factor, logical). Assigning an integer makes the variable type “int.” A variable is simply a reserved memory location where values are stored.\nTo use R effectively, you need a solid understanding of its basic data types, data structures, and how to work with them.\nR has a range of data types. The most common ones are:\n\nnumeric (whole, real or decimal)\nlogical\ncharacter\nfactor\n\nBelow are some basic examples of data points that are classed as character, numeric, or integer values, etc.\n\ncharacter: “a”, “swc”\nnumeric: 2.0, 15.5\nlogical: TRUE, FALSE\nfactor: 2 levels “boy”, “girl” (text categories with assigned numbers as a label)\n\nYou can use the class function i.e., class() on any object to identify its data type. For example, using the class() function on existing objects we created early on (i.e., e and f) in section 1.4 tells us that its a character object.\n\ne &lt;- \"RStudio\"\nf &lt;- \"Hello world\"\n\n\nclass(f)\n\n[1] \"character\"\n\nclass(e)\n\n[1] \"character\"\n\n\nAnother example, using the class() function on existing objects we created early on (i.e., a and b) in section 1.4 tells us that its a numeric object.\n\na &lt;- 17\nb &lt;- 10\n\n\nclass(a)\n\n[1] \"numeric\"\n\nclass(b)\n\n[1] \"numeric\"\n\n\nWe are now familiar with using the console and assigning numeric and string to objects, and identifying their data type. Let’s learn who to enter data into RStudio and create our first data frame.",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#how-to-enter-data-and-create-variables-in-rstudio-length-001627",
    "href": "02-basic_building_blocks.html#how-to-enter-data-and-create-variables-in-rstudio-length-001627",
    "title": "Introduction I",
    "section": "",
    "text": "[Watch on YouTube]\nHere, we will learn some basics coding etiquettes creating a dataset from scratch using the two functions:\n\nc() combine function\ndata.frame(): data frame function\n\nAs you have already seen, RStudio is an object-oriented software package and so entering data is slightly different from the usual way of inputting information into a spreadsheet (e.g., Microsoft Excel). Here, you will need to enter the information as a Vector object before combining them into a Data Frame object.\nConsider this crude example of data containing the additional health information for 4 people. It contains the variable (or column) names id, name, height, weight and gender.\n\n\n\nid\nname\nheight\nweight\ngender\n\n\n\n\n1\nKofi\n1.65\n64.2\nM\n\n\n2\nHarry\n1.77\n80.3\nM\n\n\n3\nHuijun\n1.70\n58.7\nF\n\n\n4\nFatima\n1.68\n75.0\nF\n\n\n\nNow, when entering data to RStudio it is not like Microsoft Excel where we enter data into the cells of a spreadsheet. In RStudio, data is entered as a sequence of elements and listed inside an object called a vector.\nFor instance, if we have three age values of 12, 57 and 26 years, and we want to enter this in RStudio in that order, we need to use the combine function c() and combine these three elements into a vector object. Hence, the code will be c(12, 57, 26). We can assign this data by typing this code as age &lt;- c(12, 57, 26). Any time you type age into RStudio’s console it will hence return these three values as a vector unless you chose to overwrite it with different information.\nLet us look at this more closely with the id variable in the above data. Each person has a unique ID number from 1 to 4. We are going to list the numbers 1, 2, 3 and 4 as a sequence of elements into a vector using the combine function c() and then assign it as a vector object calling it id.\n\n# Create 'id' vector object \nid &lt;- c(1, 2, 3, 4)\n\n# Type the vector object 'id' in console to see output or press the 'run' button\nid\n\n[1] 1 2 3 4\n\n\nNow, let us enter the information the same way for the remaining columns for name, height, weight and gender like we did for id:\n\n# Create 'name' vector object\nname &lt;- c(\"Kofi\", \"Harry\", \"Huijun\", \"Fatima\")\nname\n\n[1] \"Kofi\"   \"Harry\"  \"Huijun\" \"Fatima\"\n\n# Create 'height' (in meters) vector object\nheight &lt;- c(1.65, 1.77, 1.70, 1.68)\nheight\n\n[1] 1.65 1.77 1.70 1.68\n\n# Create 'weight' (in kg) vector object\nweight &lt;- c(64.2, 80.3, 58.7, 75.0)\nweight\n\n[1] 64.2 80.3 58.7 75.0\n\n# Create 'gender' vector object\ngender &lt;- c(\"M\", \"M\", \"F\", \"F\")\ngender\n\n[1] \"M\" \"M\" \"F\" \"F\"\n\n\nNow, that we have the vector objects ready. Let us bring them together to create a proper dataset. This new object is called a Data frame. We need to list the vectors inside the data.frame() function. For example:\n\n# Create a dataset (data frame)\ndataset &lt;- data.frame(id, name, height, weight, gender)\n\n# Type the data frame object 'dataset' in console to print the output in console\ndataset\n\n  id   name height weight gender\n1  1   Kofi   1.65   64.2      M\n2  2  Harry   1.77   80.3      M\n3  3 Huijun   1.70   58.7      F\n4  4 Fatima   1.68   75.0      F\n\n\nYou can also see dataset in a data viewer, by using the View() function to see in a spreadsheet:\n\nView(dataset)\n\n\n\n\n\n\n\nImportant\n\n\n\nThe column ‘id’ is a numeric variable with integers. The second column ‘name’ is a text variable with strings. The third & fourth columns ‘height’ and ‘weight’ are examples of numeric variables with real numbers with continuous measures. The variable ‘gender’ is a text variable with strings – however, this type of variable is classed as a categorical variable as individuals were categorised as either ‘M’ and ‘F’.",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#how-do-we-create-a-variable-based-on-other-existing-variables-within-a-data-frame-length-002100",
    "href": "02-basic_building_blocks.html#how-do-we-create-a-variable-based-on-other-existing-variables-within-a-data-frame-length-002100",
    "title": "Introduction I",
    "section": "",
    "text": "[Watch on YouTube]\nTo access a variable by its name within a data frame, you will need to first type the name of the data frame followed by a $ (dollar sign), and then typing the variable’s name of interest. For instance, suppose you just want to see the height values in the Console viewer - you just type:\n\n# to access height - you need to type 'dataset$height'\ndataset$height\n\n[1] 1.65 1.77 1.70 1.68\n\n\nWe can use other columns or variables within our data frame to create another variable. This technique is essentially important when cleaning and managing data. From this dataset, it is possible to derive the body mass index bmi from height and weight using the formula:\n\n\\(BMI = weight/height^2\\)\n\nTo generate bmi into our data frame, we would need to access the height (m) and weight (kg) columns using the $ from the data frame its stored to, and apply the above formula as a code to generate the new bmi column:\n\n# Create 'bmi' in the data frame i.e.,'dataset' and calculate 'bmi'\n# using the $weight and $height\ndataset$bmi &lt;- dataset$weight/((dataset$height)^2)\n# View the data frame ‘dataset’ and you will see the new bmi variable inside\nView(dataset)\n\nYou can overwrite the height (m) column to change its units into centimeters by multiplying it to 100; equally, the weight (kg) column can be overwritten and converted from units of kilograms to grams by multiplying it to 1000.\n\n# using $height and *100 \ndataset$height &lt;- dataset$height*100\n# using $weight and *100\ndataset$weight &lt;- dataset$weight*1000\n# view updated dataset\ndataset\n\n  id   name height weight gender      bmi\n1  1   Kofi    165  64200      M 23.58127\n2  2  Harry    177  80300      M 25.63120\n3  3 Huijun    170  58700      F 20.31142\n4  4 Fatima    168  75000      F 26.57313",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#saving-your-r-script",
    "href": "02-basic_building_blocks.html#saving-your-r-script",
    "title": "Introduction I",
    "section": "",
    "text": "Well done! You have learnt the basics of coding in RStudio - next week, we will learn further coding etiquettes for managing datasets which includes:\n\nImporting & exporting spreadsheets with RStudio\nSetting up work directories\nRow and column manipulations\nMerging two data frames.\n\nYou can now save your script for future use by clicking on the save icon in the menu bar.",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "01-what_is_rstudio.html",
    "href": "01-what_is_rstudio.html",
    "title": "What is RStudio (or R)?",
    "section": "",
    "text": "R (or RStudio) is a statistical programming package that allows users to carry out a wide range of statistical analyses. It can also function as GIS software, enabling various types of analysis on geographical data. In the same way, it can be used for data management and geoprocessing—for example, importing different types of data, whether non-spatial or spatial, and preparing them for analysis.\nThere are two versions:\n\n\n\n\n\n\n\n\n\nThe famous icon on the left is the version for R (Base), and the one on the right is the version for RStudio. Both software packages are the same. The only difference is that RStudio is attractive, intuitive, and more importantly, it is user-friendly than Base R. So, we will be using this version (i.e., RStudio) throughout this workshop.\nLet us talk about the installation of RStudio on your personal computer.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nRStudio is an open-source software, it is free. It is widely recommended in data science, scientific research, and technical communication because it is easy to access, download, and install.\nTo use RStudio, you must first install R (Base) before installing RStudio. Follow the steps below to install both programs for your operating system (Windows or Mac).\nSteps\n\nDownload the R (Base) installer from the table below, then run the file to complete the installation.\nNext, download the RStudio installer from the table below, then run the file to complete the installation.\n\n\n\n\nOS User type\nR (Base)\nRStudio Desktop\n\n\n\n\nWindows\nR-4.5.1-win.exe\nRStudio-2025.09.0-387.exe\n\n\nMAC (Intel)\nR-4.5.1-x86_64.pkg\nRStudio-2025.09.0-387.dmg\n\n\nMAC (M1, M2 or M3)\nR-4.5.1-arm64.pkg\nRStudio-2025.09.0-387.dmg\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nR (Base) is very particular about the operating system! Please be sure to use the correct installer for your computer:\n\nWindows users: use the files in the first row.\nMac (Intel) users: use the files in the second row.\nMac (M1, M2, or M3 chip) users: use the files in the third row.\n\n\n\nThis section covers how to download and install RStudio for it to be used locally on your machine. There are several ways to access RStudio:\n\nDirectly through UCL Workstation PC\nRemotely through the UCL Desktop@Anywhere remote service with your laptop.\n\nLet us quickly go through these options.\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nGo to any PC cluster in UCL and simply log on to a computer. Use the UCL Applications tool to access the desired software.\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nTo use RStudio (or any other software which UCL provides as service to students) remotely from your laptop/PC/tablet, you can:\n\nGo to https://www.ucl.ac.uk/isd/services/computers/remote-access/desktopucl-anywhere.\nClick on the blue button that says: “Log in to Desktop @ UCL Anywhere.”\nYou will be prompted to enter your UCL username (username@ucl.ac.uk) and password. Enter the correct credentials to gain access to the remote portal.\nIf you see the option “Use Web Browser”, select it to run the remote functions directly in your browser without installing the Citrix Workspace application.\nYou should now see a Desktop @ UCL Anywhere button – click this button to complete the login. At this point, it will feel as though you are using a UCL workstation in a cluster room or library, but remotely.\nOn the desktop, click the UCL Applications icon and search for RStudio.\nSelect the latest version available (check the year) and open it with a single click (not multiple clicks).\n\nVoilà! You now have remote access to RStudio.",
    "crumbs": [
      "Getting Started",
      "What is RStudio (or R)?"
    ]
  },
  {
    "objectID": "01-what_is_rstudio.html#rstudio-and-downloading-it-length-001135",
    "href": "01-what_is_rstudio.html#rstudio-and-downloading-it-length-001135",
    "title": "What is RStudio (or R)?",
    "section": "",
    "text": "[Watch on YouTube]\nRStudio is an open-source software, it is free. It is widely recommended in data science, scientific research, and technical communication because it is easy to access, download, and install.\nTo use RStudio, you must first install R (Base) before installing RStudio. Follow the steps below to install both programs for your operating system (Windows or Mac).\nSteps\n\nDownload the R (Base) installer from the table below, then run the file to complete the installation.\nNext, download the RStudio installer from the table below, then run the file to complete the installation.\n\n\n\n\nOS User type\nR (Base)\nRStudio Desktop\n\n\n\n\nWindows\nR-4.5.1-win.exe\nRStudio-2025.09.0-387.exe\n\n\nMAC (Intel)\nR-4.5.1-x86_64.pkg\nRStudio-2025.09.0-387.dmg\n\n\nMAC (M1, M2 or M3)\nR-4.5.1-arm64.pkg\nRStudio-2025.09.0-387.dmg\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nR (Base) is very particular about the operating system! Please be sure to use the correct installer for your computer:\n\nWindows users: use the files in the first row.\nMac (Intel) users: use the files in the second row.\nMac (M1, M2, or M3 chip) users: use the files in the third row.\n\n\n\nThis section covers how to download and install RStudio for it to be used locally on your machine. There are several ways to access RStudio:\n\nDirectly through UCL Workstation PC\nRemotely through the UCL Desktop@Anywhere remote service with your laptop.\n\nLet us quickly go through these options.",
    "crumbs": [
      "Getting Started",
      "What is RStudio (or R)?"
    ]
  },
  {
    "objectID": "01-what_is_rstudio.html#access-through-workstation-ucl-applications-store-length-000500",
    "href": "01-what_is_rstudio.html#access-through-workstation-ucl-applications-store-length-000500",
    "title": "What is RStudio (or R)?",
    "section": "",
    "text": "[Watch on YouTube]\nGo to any PC cluster in UCL and simply log on to a computer. Use the UCL Applications tool to access the desired software.",
    "crumbs": [
      "Getting Started",
      "What is RStudio (or R)?"
    ]
  },
  {
    "objectID": "01-what_is_rstudio.html#remotely-access-through-ucl-desktopanywhere-length-000934",
    "href": "01-what_is_rstudio.html#remotely-access-through-ucl-desktopanywhere-length-000934",
    "title": "What is RStudio (or R)?",
    "section": "",
    "text": "[Watch on YouTube]\nTo use RStudio (or any other software which UCL provides as service to students) remotely from your laptop/PC/tablet, you can:\n\nGo to https://www.ucl.ac.uk/isd/services/computers/remote-access/desktopucl-anywhere.\nClick on the blue button that says: “Log in to Desktop @ UCL Anywhere.”\nYou will be prompted to enter your UCL username (username@ucl.ac.uk) and password. Enter the correct credentials to gain access to the remote portal.\nIf you see the option “Use Web Browser”, select it to run the remote functions directly in your browser without installing the Citrix Workspace application.\nYou should now see a Desktop @ UCL Anywhere button – click this button to complete the login. At this point, it will feel as though you are using a UCL workstation in a cluster room or library, but remotely.\nOn the desktop, click the UCL Applications icon and search for RStudio.\nSelect the latest version available (check the year) and open it with a single click (not multiple clicks).\n\nVoilà! You now have remote access to RStudio.",
    "crumbs": [
      "Getting Started",
      "What is RStudio (or R)?"
    ]
  },
  {
    "objectID": "03-handling_data_structures.html",
    "href": "03-handling_data_structures.html",
    "title": "Introduction II",
    "section": "",
    "text": "By the end of this tutorial, you will be able to:\n\nSet your working directory on Mac and Windows\nImport a .csv file into RStudio\nUnderstand the structure of a data frame (rows and columns)\nFilter data using both numeric and categorical variables\nCombine multiple conditions with logical operators to perform further filtering of data\nExport data back into a .csv file\n\nThese objectives, combined with those from last week, serve as a gateway to learning RStudio and building a strong foundation. Let us begin!\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nBefore we do anything - make sure to have downloaded the dataset for this computer session by clicking [HERE]. There are three datasets:\n\nPrimary Schools in Ealing.csv: This comma separated values (CSV) file contains the data needed to follow today’s tutorial. 2 Open Street Drains in Accra: This is zipped folder containing images of stormwater drainage infrastructure in Accra annotated with key information to created a data frame. It will be needed in part one of Task 1.\nPrevalence of Soil Transmitted Helminths in Africa.csv: This dataset contains point locations for villages across sub-Saharan Africa. It will be needed in part two of Task 1.\n\nInstructions In your computer, do the following:\n\nCreate a new folder on your desktop and rename the folder GEOG0186\nNext, create a new sub-folder within GEOG0186 and rename it as Week 2.\nFrom the downloaded folder Dataset for Week 2, make sure to unzip and transfer ALL the datasets directly to the Week 2 folder.\n\n\n\nThis part is probably the most important section of this tutorial.We are going to learn how to set the Work Directory. This basically refers to us connecting the RStudio to the folder containing our dataset that we want to import and analyse.\nDoing this allows the user to tell RStudio to open data from a folder located somewhere in our computer using something called the Path Location.\nThe Path Location specifies the whereabouts of the data file(s) stored within a computer. Setting your directory in RStudio, in code, beforehand makes life incredibly easier (than the usual point-and-click approach) in terms of finding, importing, exporting and saving data in and out of RStudio.\nTo illustrate what a Path Location is – suppose on my desktop’s dashboard on a Mac/Windows there is a folder called GEOG0186, and within that folder, exists another folder called Week 2. Finally, suppose a comma separated value (.csv) data file called Primary Schools in Ealing.csv is store in this folder i.e., Week 2. If via RStudio you want to open this CSV data file located in within the Week 2 folder. You will need to first set the path to Week 2 in RStudio using the setwd() function.\n\n\nFor MAC users, the path location would be written as follows, \"/Users/accountName/Desktop/GEOG0186/Workshop 1\". You can access this piece of information simply by:\n\nOpen the folder GEOG0186\nRight-clicking on the folder Week 2 in which the files are stored. A drop-down scroll menu will appear (see image below).\n\n\n\n\n\n\n\n\n\n\n\nHold the Option (⌥) button on your keyboard down, and click Copy “Week 2” as Pathname\nPaste the copied path name into the function setwd() and run the code\n\nFor Mac, the setwd() is as follows:\n\n# set work directory in macs\nsetwd(\"/Users/accountName/Desktop/GEOG0186/Week 2\")\n\n\n\n\nFor Windows user, its marginally different - the path location to this folder on a Windows machine would be written as follows, \"C:/Users/accountName/Desktop/GEOG00186/Week 2\". You can access this piece of information simply by:\n\nOpen the GEOG0186 folder to reveal the Week 2 folder.\nOpen the Week 2 folder where your downloaded data files have been stored.\nNow, click on the browser bar at the top which shows GEOG0186 &gt; Week 2. This should highlight and show \"C:\\Users\\accountName\\Desktop\\GEOG0186\\Week 2\" (see image below).\n\n\n\n\n\n\n\n\n\n\n\nNow, copy \"C:\\Users\\accountName\\Desktop\\GEOG0186\\Week 2\" and paste the path name into the setwd() function in your R script.\nLastly, change all the back slashes \\ in the path name to forward slashes / and run the code. It should look like this: setwd(\"C:/Users/accountName/Desktop/GEOG0186/Week 2\").\n\nFor Windows, the setwd() is as follows:\n\n# set work directory in windows\nsetwd(\"C:/Users/accountName/Desktop/GEOG0013/Week 2\")\n\nIf you type the code getwd() and quickly run it through console - if it returns the inputted path location - then you have done this correctly.\nNow, let us learn how to import a CSV data into RStudio.",
    "crumbs": [
      "Core Content",
      "Introduction II"
    ]
  },
  {
    "objectID": "03-handling_data_structures.html#learning-objectives",
    "href": "03-handling_data_structures.html#learning-objectives",
    "title": "Introduction II",
    "section": "",
    "text": "By the end of this tutorial, you will be able to:\n\nSet your working directory on Mac and Windows\nImport a .csv file into RStudio\nUnderstand the structure of a data frame (rows and columns)\nFilter data using both numeric and categorical variables\nCombine multiple conditions with logical operators to perform further filtering of data\nExport data back into a .csv file\n\nThese objectives, combined with those from last week, serve as a gateway to learning RStudio and building a strong foundation. Let us begin!",
    "crumbs": [
      "Core Content",
      "Introduction II"
    ]
  },
  {
    "objectID": "03-handling_data_structures.html#setting-the-working-directory-to-datasets",
    "href": "03-handling_data_structures.html#setting-the-working-directory-to-datasets",
    "title": "Introduction II",
    "section": "",
    "text": "Warning\n\n\n\nBefore we do anything - make sure to have downloaded the dataset for this computer session by clicking [HERE]. There are three datasets:\n\nPrimary Schools in Ealing.csv: This comma separated values (CSV) file contains the data needed to follow today’s tutorial. 2 Open Street Drains in Accra: This is zipped folder containing images of stormwater drainage infrastructure in Accra annotated with key information to created a data frame. It will be needed in part one of Task 1.\nPrevalence of Soil Transmitted Helminths in Africa.csv: This dataset contains point locations for villages across sub-Saharan Africa. It will be needed in part two of Task 1.\n\nInstructions In your computer, do the following:\n\nCreate a new folder on your desktop and rename the folder GEOG0186\nNext, create a new sub-folder within GEOG0186 and rename it as Week 2.\nFrom the downloaded folder Dataset for Week 2, make sure to unzip and transfer ALL the datasets directly to the Week 2 folder.\n\n\n\nThis part is probably the most important section of this tutorial.We are going to learn how to set the Work Directory. This basically refers to us connecting the RStudio to the folder containing our dataset that we want to import and analyse.\nDoing this allows the user to tell RStudio to open data from a folder located somewhere in our computer using something called the Path Location.\nThe Path Location specifies the whereabouts of the data file(s) stored within a computer. Setting your directory in RStudio, in code, beforehand makes life incredibly easier (than the usual point-and-click approach) in terms of finding, importing, exporting and saving data in and out of RStudio.\nTo illustrate what a Path Location is – suppose on my desktop’s dashboard on a Mac/Windows there is a folder called GEOG0186, and within that folder, exists another folder called Week 2. Finally, suppose a comma separated value (.csv) data file called Primary Schools in Ealing.csv is store in this folder i.e., Week 2. If via RStudio you want to open this CSV data file located in within the Week 2 folder. You will need to first set the path to Week 2 in RStudio using the setwd() function.\n\n\nFor MAC users, the path location would be written as follows, \"/Users/accountName/Desktop/GEOG0186/Workshop 1\". You can access this piece of information simply by:\n\nOpen the folder GEOG0186\nRight-clicking on the folder Week 2 in which the files are stored. A drop-down scroll menu will appear (see image below).\n\n\n\n\n\n\n\n\n\n\n\nHold the Option (⌥) button on your keyboard down, and click Copy “Week 2” as Pathname\nPaste the copied path name into the function setwd() and run the code\n\nFor Mac, the setwd() is as follows:\n\n# set work directory in macs\nsetwd(\"/Users/accountName/Desktop/GEOG0186/Week 2\")\n\n\n\n\nFor Windows user, its marginally different - the path location to this folder on a Windows machine would be written as follows, \"C:/Users/accountName/Desktop/GEOG00186/Week 2\". You can access this piece of information simply by:\n\nOpen the GEOG0186 folder to reveal the Week 2 folder.\nOpen the Week 2 folder where your downloaded data files have been stored.\nNow, click on the browser bar at the top which shows GEOG0186 &gt; Week 2. This should highlight and show \"C:\\Users\\accountName\\Desktop\\GEOG0186\\Week 2\" (see image below).\n\n\n\n\n\n\n\n\n\n\n\nNow, copy \"C:\\Users\\accountName\\Desktop\\GEOG0186\\Week 2\" and paste the path name into the setwd() function in your R script.\nLastly, change all the back slashes \\ in the path name to forward slashes / and run the code. It should look like this: setwd(\"C:/Users/accountName/Desktop/GEOG0186/Week 2\").\n\nFor Windows, the setwd() is as follows:\n\n# set work directory in windows\nsetwd(\"C:/Users/accountName/Desktop/GEOG0013/Week 2\")\n\nIf you type the code getwd() and quickly run it through console - if it returns the inputted path location - then you have done this correctly.\nNow, let us learn how to import a CSV data into RStudio.",
    "crumbs": [
      "Core Content",
      "Introduction II"
    ]
  }
]