[
  {
    "objectID": "00-module_overview.html#getting-started-with-the-learning-materials-length-001351",
    "href": "00-module_overview.html#getting-started-with-the-learning-materials-length-001351",
    "title": "GEOG0186: Quantitative Skills",
    "section": "Getting Started with the Learning Materials (Length: 00:13:51)",
    "text": "Getting Started with the Learning Materials (Length: 00:13:51)\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]",
    "crumbs": [
      "Module Overview",
      "Welcome"
    ]
  },
  {
    "objectID": "00-module_overview.html#self-guided-flipped-learning-approach",
    "href": "00-module_overview.html#self-guided-flipped-learning-approach",
    "title": "GEOG0186: Quantitative Skills",
    "section": "Self-Guided & Flipped Learning Approach",
    "text": "Self-Guided & Flipped Learning Approach\nThis strand follows a more relaxed teaching structure. You will work independently at your own pace, with guidance provided along the way. We expect you to engage with the learning materials - supported by online tutorials, coding instructions, and guidance videos - before going into the computer practical sessions. This allows our session time to be used for discussion, problem-solving, and hands-on practice.",
    "crumbs": [
      "Module Overview",
      "Welcome"
    ]
  },
  {
    "objectID": "00-module_overview.html#computer-practical-sessions-timetable",
    "href": "00-module_overview.html#computer-practical-sessions-timetable",
    "title": "GEOG0186: Quantitative Skills",
    "section": "Computer Practical Sessions & Timetable",
    "text": "Computer Practical Sessions & Timetable\nThere are 10 computer practical sessions throughout Term 1, all delivered in-person and facilitated by Postgraduate Teaching Assistants (PGTAs).\nAll sessions take place every Wednesday between 9:00am and 12:00pm. The entire Geography cohort has been split into three groups (Computer Groups A, B, and C), with practicals delivered separately in one-hour, back-to-back sessions each week to each group. The schedule is as follows:\n\nGroup A: 09:00am–10:00am, Christopher Ingold Building G20 – Public Cluster\nGroup B: 10:00am–11:00am, Birkbeck Malet Street 422/423 – Public Cluster\nGroup C: 11:00am–12:00pm, Birkbeck Malet Street 422/423 – Public Cluster\n\n\n\n\n\n\n\nImportant\n\n\n\nThe above locations for Group A, B, and C are public clusters with PC workstations. Since you will mostly be working through the materials at your own pace, often on your own laptops with RStudio installed, we highly recommend that you bring your own laptop to the computer practicals for ease of use.\n\n\nThe topics for the course are as follows:\n\n\n\n\n\n\n\n\nDates\nWeek\nList of Topics\n\n\n\n\n01/10/25\n1\nIntroduction I: Basics Building Blocks for Computing in RStudio\n\n\n08/10/25\n2\nIntroduction II: Handling Data Structures in RStudio\n\n\n15/10/25\n3\nExamining I: Frequency Distribution\n\n\n22/10/25\n4\nExamining II: Descriptive Statistics\n\n\n29/10/25\n5\nExamining III: Types of Data Visualisation\n\n\n\n\nReading Week\n\n\n12/11/25\n6\nSourcing Data I: Acquiring Data From Open Sources\n\n\n19/11/25\n7\nSourcing Data II: Sampling from Probability Distribution\n\n\n26/11/25\n8\nAir Quality I: Correlation & Regression\n\n\n03/12/25\n9\nAir Quality II: Box Plots and T-tests\n\n\n10/12/25\n10\nPortfolio Surgery & Wrap-up.",
    "crumbs": [
      "Module Overview",
      "Welcome"
    ]
  },
  {
    "objectID": "00-module_overview.html#questions-discusson-forum-on-moodle",
    "href": "00-module_overview.html#questions-discusson-forum-on-moodle",
    "title": "GEOG0186: Quantitative Skills",
    "section": "Questions & Discusson Forum on Moodle",
    "text": "Questions & Discusson Forum on Moodle\nOn Moodle, you can use the Ask a question section to post general queries about the learning materials on this website, as well as any technical issues you encounter during your self-guided study. Please refer to that section on Moodle, and either I or one of the PGTAs will respond with solutions.\n\n\n\n\n\n\nImportant\n\n\n\nWhile Moodle is the central point for information and communications for GEOG0186 Quantitative Skills and where all formative assessments are submitted. However, note that all the weekly content will only be hosted on this dedicated web page and not on Moodle.",
    "crumbs": [
      "Module Overview",
      "Welcome"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html",
    "href": "02-basic_building_blocks.html",
    "title": "Introduction I",
    "section": "",
    "text": "The learning objectives for today are:\n\nBecome familiar with the user interface in RStudio\nPractice basic coding in the R Console\nOpen an R script and create basic objects in RStudio\nUnderstand different data types\nData entry and variable creation in RStudio\n\nThese objectives serve as a gateway to learning RStudio and building a strong foundation. Let us begin!\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nWhen you open RStudio for the first time, you are greeted by its interface. The window is divided into three panels:\n\nR Console\nEnvironment\nFiles, Help, and Output\n\n\n\n\n\n\n\n\n\n\n\nPanel 1: The R Console allows you to type R code to perform quick commands and basic calculations. It also reports whether code executions from scripts are successful or have failed.\nPanel 2: The Environment shows the objects currently stored in RStudio’s memory, such as values, vectors, data frames, and spatial objects.\nPanel 3: This panel contains several tabs. The most important are: (i) Files: access folders on your computer to open datasets; (ii) Help: view help documentation for functions and commands; and (iii) Plots: review the plots you generate (e.g., histograms, scatterplots, maps).\n\nThe section at the top of RStudio is the Menu Bar. From here, you can access functions for saving, editing, and opening a new Script File. Opening a new Script File reveals a fourth panel above the Console.\nYou can open a Script File by:\n\nClicking on the File tab in the Menu Bar. A drop-down menu will appear. Scroll to New File. Under New File, click R Script. This opens a new script titled Untitled 1.\n\n\n\n\n\n\n\nImportant\n\n\n\nThroughout the course, and in all practical tutorials, you will be encouraged to use an R Script to collate and save the code you write for any statistical or spatial analysis. However, we will only begin working with scripts in section 1.4 of the tutorials. For now, let’s start with the absolute basics: interacting with the R Console and using it as a simple calculator for typing basic code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nThe R Console window (Panel 1) is where RStudio waits for you to tell it what to do. It displays the code you enter and the results of each command. You can type commands directly into this window for immediate execution.\nLet’s begin by using the Console as a basic calculator for addition (+), subtraction (-), multiplication (*), division (/), exponents (^), and other calculations.\nClick inside the R Console window, type 19+8, and press the Enter key (↵) to see the result. Then try the following calculations by typing them into the Console:\n\n# Perform addition\n19+8\n\n# Perform subtraction\n20-89\n\n# Perform multiplication\n18*20\n\n# Perform division\n27/3\n\n# To number to a power e.g., 2 raise to the power of 8\n2^8\n\n# Perform complex sums\n(5*(170-3.405)/91)+1002\n\n\n\n\n\n\n\nImportant\n\n\n\nThe text that follows a hash symbol # in the code chunk is a comment, not actual code. It explains what the line of code without the # is doing.\n\n\nIn addition to basic arithmetic operations, we can also use common mathematical functions such as exponentials and logarithms:\n\nexp() calculates the exponential\nlog() calculates the logarithm\n\nDo not worry about fully understanding these functions for now as you will likely use them later in Weeks 8 and 9 when transforming variables.\nTry the following by typing them into the R Console window:\n\n# use exp() to apply an exponential to a value\nexp(5) \n\n# use log() to transforrm a value on to a logarithm scale\nlog(3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nLet’s open an R Script file!\nNow that we are familiar with using the Console as a calculator, let’s build on this and learn one of the most important features in R: the Assignment Operator.\nThe arrow symbol &lt;- is called the Assignment Operator. You type it by pressing the less-than symbol &lt; followed by the hyphen -. It allows you to assign values to an object in R.\nObjects are stored quantities in RStudio’s environment. They can hold anything from numeric values to character strings. For example, to create a numeric object called x and assign it the value 3, type: x &lt;- 3. When you enter x in the Console and press Enter (↵), R will return the numeric value 3.\nSimilarly, to create a string object called y and assign it the text \"Hello!\", type: y &lt;- \"Hello!\" When you enter y in the Console, it will return the text value Hello!.\nNow, let’s create the objects a, b, c, and d and assign them numeric values. Perform the following by typing them into the R Console:\n\n# Create an object called 'a' and assign the value 17 to it\na &lt;- 17\n\n# Type the object 'a' in console as a command to return value 17\na\n\n# Create an object called 'b' and assign the value 10 to it\nb &lt;- 10\n\n# Type the object 'b' in console as a command to return value 10\nb\n\n# Create an object called 'c' and assign the value 9 to it\nc &lt;- 9\n\n# Type the object 'c' in console as a command to return value 9\nc\n\n# Create an object called 'd' and assign the value 8 to it\nd &lt;- 8\n\n# Type the object 'd' in console as a command to return value 8\nd\n\nNotice how the objects a, b, c and d and its value are listed and stored in RStudio’s environment panel. We can perform the following maths operations with these object values:\n\n# type the following and return an answer\n(a + b + c + d)/5\n\n# type the following and return an answer\n(5*(a-c)/d)^2\n\nLet us create more objects but this time we will assign character string(s) to them. Please note that when typing a string of characters as data you will need to cover them with quotation marks \"...\". For example, say we want to create a string object called y and assign it with some text \"Hello!\". We do this by typing y &lt;- \"Hello!\".\nTry these examples of assigning the following character text to an object:\nLet’s create more objects, but this time we will assign character strings to them. When typing a string of characters as data, you must enclose them in quotation marks \"...\".\nFor example, to create a string object called y and assign it the text \"Hello!\", type: y &lt;- \"Hello!\"\nTry the following examples to assign character text to objects:\n\n# Create an object called 'e' and assign the character string \"RStudio\"\ne &lt;- \"RStudio\"\n\n# Type the object 'e' in the console as a command to return \"RStudio\"\ne\n\n# Create an object called 'f', assign character string \"Hello world\" \nf &lt;- \"Hello world\"\n\n# Type the object 'f' in the console as a command to return \"Hello world\"\nf\n\n# Create an object called 'g' and assign \"Blade Runner is amazing\"\ng &lt;- \"Blade Runner is amazing\"\n\n# Type the object 'g' in the console to return the result\ng\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nIn programming, variables are used to store information, and each has a type determined by the kind of data it holds (e.g., integer, character, factor, logical). Assigning an integer makes the variable type “int.” A variable is simply a reserved memory location where values are stored.\nTo use R effectively, you need a solid understanding of its basic data types, data structures, and how to work with them.\nR has a range of data types. The most common ones are:\n\nnumeric (whole, real or decimal)\nlogical\ncharacter\nfactor\n\nBelow are some basic examples of data points that are classed as character, numeric, or integer values, etc.\n\ncharacter: “a”, “swc”\nnumeric: 2.0, 15.5\nlogical: TRUE, FALSE\nfactor: 2 levels “boy”, “girl” (text categories with assigned numbers as a label)\n\nYou can use the class function i.e., class() on any object to identify its data type. For example, using the class() function on existing objects we created early on (i.e., e and f) in section 1.4 tells us that its a character object.\n\ne &lt;- \"RStudio\"\nf &lt;- \"Hello world\"\n\n\nclass(f)\n\n[1] \"character\"\n\nclass(e)\n\n[1] \"character\"\n\n\nAnother example, using the class() function on existing objects we created early on (i.e., a and b) in section 1.4 tells us that its a numeric object.\n\na &lt;- 17\nb &lt;- 10\n\n\nclass(a)\n\n[1] \"numeric\"\n\nclass(b)\n\n[1] \"numeric\"\n\n\nWe are now familiar with using the console and assigning numeric and string to objects, and identifying their data type. Let’s learn who to enter data into RStudio and create our first data frame.\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nHere, we will learn some basics coding etiquettes creating a dataset from scratch using the two functions:\n\nc() combine function\ndata.frame(): data frame function\n\nAs you have already seen, RStudio is an object-oriented software package and so entering data is slightly different from the usual way of inputting information into a spreadsheet (e.g., Microsoft Excel). Here, you will need to enter the information as a Vector object before combining them into a Data Frame object.\nConsider this crude example of data containing the additional health information for 4 people. It contains the variable (or column) names id, name, height, weight and gender.\n\n\n\nid\nname\nheight\nweight\ngender\n\n\n\n\n1\nKofi\n1.65\n64.2\nM\n\n\n2\nHarry\n1.77\n80.3\nM\n\n\n3\nHuijun\n1.70\n58.7\nF\n\n\n4\nFatima\n1.68\n75.0\nF\n\n\n\nNow, when entering data to RStudio it is not like Microsoft Excel where we enter data into the cells of a spreadsheet. In RStudio, data is entered as a sequence of elements and listed inside an object called a vector.\nFor instance, if we have three age values of 12, 57 and 26 years, and we want to enter this in RStudio in that order, we need to use the combine function c() and combine these three elements into a vector object. Hence, the code will be c(12, 57, 26). We can assign this data by typing this code as age &lt;- c(12, 57, 26). Any time you type age into RStudio’s console it will hence return these three values as a vector unless you chose to overwrite it with different information.\nLet us look at this more closely with the id variable in the above data. Each person has a unique ID number from 1 to 4. We are going to list the numbers 1, 2, 3 and 4 as a sequence of elements into a vector using the combine function c() and then assign it as a vector object calling it id.\n\n# Create 'id' vector object \nid &lt;- c(1, 2, 3, 4)\n\n# Type the vector object 'id' in console to see output or press the 'run' button\nid\n\n[1] 1 2 3 4\n\n\nNow, let us enter the information the same way for the remaining columns for name, height, weight and gender like we did for id:\n\n# Create 'name' vector object\nname &lt;- c(\"Kofi\", \"Harry\", \"Huijun\", \"Fatima\")\nname\n\n[1] \"Kofi\"   \"Harry\"  \"Huijun\" \"Fatima\"\n\n# Create 'height' (in meters) vector object\nheight &lt;- c(1.65, 1.77, 1.70, 1.68)\nheight\n\n[1] 1.65 1.77 1.70 1.68\n\n# Create 'weight' (in kg) vector object\nweight &lt;- c(64.2, 80.3, 58.7, 75.0)\nweight\n\n[1] 64.2 80.3 58.7 75.0\n\n# Create 'gender' vector object\ngender &lt;- c(\"M\", \"M\", \"F\", \"F\")\ngender\n\n[1] \"M\" \"M\" \"F\" \"F\"\n\n\nNow, that we have the vector objects ready. Let us bring them together to create a proper dataset. This new object is called a Data frame. We need to list the vectors inside the data.frame() function. For example:\n\n# Create a dataset (data frame)\ndataset &lt;- data.frame(id, name, height, weight, gender)\n\n# Type the data frame object 'dataset' in console to print the output in console\ndataset\n\n  id   name height weight gender\n1  1   Kofi   1.65   64.2      M\n2  2  Harry   1.77   80.3      M\n3  3 Huijun   1.70   58.7      F\n4  4 Fatima   1.68   75.0      F\n\n\nYou can also see dataset in a data viewer, by using the View() function to see in a spreadsheet:\n\nView(dataset)\n\n\n\n\n\n\n\nImportant\n\n\n\nThe column ‘id’ is a numeric variable with integers. The second column ‘name’ is a text variable with strings. The third & fourth columns ‘height’ and ‘weight’ are examples of numeric variables with real numbers with continuous measures. The variable ‘gender’ is a text variable with strings – however, this type of variable is classed as a categorical variable as individuals were categorised as either ‘M’ and ‘F’.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nTo access a variable by its name within a data frame, you will need to first type the name of the data frame followed by a $ (dollar sign), and then typing the variable’s name of interest. For instance, suppose you just want to see the height values in the Console viewer - you just type:\n\n# to access height - you need to type 'dataset$height'\ndataset$height\n\n[1] 1.65 1.77 1.70 1.68\n\n\nWe can use other columns or variables within our data frame to create another variable. This technique is essentially important when cleaning and managing data. From this dataset, it is possible to derive the body mass index bmi from height and weight using the formula:\n\n\\(BMI = weight/height^2\\)\n\nTo generate bmi into our data frame, we would need to access the height (m) and weight (kg) columns using the $ from the data frame its stored to, and apply the above formula as a code to generate the new bmi column:\n\n# Create 'bmi' in the data frame i.e.,'dataset' and calculate 'bmi'\n# using the $weight and $height\ndataset$bmi &lt;- dataset$weight/((dataset$height)^2)\n# View the data frame ‘dataset’ and you will see the new bmi variable inside\nView(dataset)\n\nYou can overwrite the height (m) column to change its units into centimeters by multiplying it to 100; equally, the weight (kg) column can be overwritten and converted from units of kilograms to grams by multiplying it to 1000.\n\n# using $height and *100 \ndataset$height &lt;- dataset$height*100\n# using $weight and *100\ndataset$weight &lt;- dataset$weight*1000\n# view updated dataset\ndataset\n\n  id   name height weight gender      bmi\n1  1   Kofi    165  64200      M 23.58127\n2  2  Harry    177  80300      M 25.63120\n3  3 Huijun    170  58700      F 20.31142\n4  4 Fatima    168  75000      F 26.57313\n\n\n\n\n\nWell done! You have learnt the basics of coding in RStudio - next week, we will learn further coding etiquettes for managing datasets which includes:\n\nImporting & exporting spreadsheets with RStudio\nSetting up work directories\nRow and column manipulations\nMerging two data frames.\n\nYou can now save your script for future use by clicking on the save icon in the menu bar.",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#learning-objectives",
    "href": "02-basic_building_blocks.html#learning-objectives",
    "title": "Introduction I",
    "section": "",
    "text": "The learning objectives for today are:\n\nBecome familiar with the user interface in RStudio\nPractice basic coding in the R Console\nOpen an R script and create basic objects in RStudio\nUnderstand different data types\nData entry and variable creation in RStudio\n\nThese objectives serve as a gateway to learning RStudio and building a strong foundation. Let us begin!",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#rstudio-interface-length-000708",
    "href": "02-basic_building_blocks.html#rstudio-interface-length-000708",
    "title": "Introduction I",
    "section": "",
    "text": "[Watch on YouTube]\nWhen you open RStudio for the first time, you are greeted by its interface. The window is divided into three panels:\n\nR Console\nEnvironment\nFiles, Help, and Output\n\n\n\n\n\n\n\n\n\n\n\nPanel 1: The R Console allows you to type R code to perform quick commands and basic calculations. It also reports whether code executions from scripts are successful or have failed.\nPanel 2: The Environment shows the objects currently stored in RStudio’s memory, such as values, vectors, data frames, and spatial objects.\nPanel 3: This panel contains several tabs. The most important are: (i) Files: access folders on your computer to open datasets; (ii) Help: view help documentation for functions and commands; and (iii) Plots: review the plots you generate (e.g., histograms, scatterplots, maps).\n\nThe section at the top of RStudio is the Menu Bar. From here, you can access functions for saving, editing, and opening a new Script File. Opening a new Script File reveals a fourth panel above the Console.\nYou can open a Script File by:\n\nClicking on the File tab in the Menu Bar. A drop-down menu will appear. Scroll to New File. Under New File, click R Script. This opens a new script titled Untitled 1.\n\n\n\n\n\n\n\nImportant\n\n\n\nThroughout the course, and in all practical tutorials, you will be encouraged to use an R Script to collate and save the code you write for any statistical or spatial analysis. However, we will only begin working with scripts in section 1.4 of the tutorials. For now, let’s start with the absolute basics: interacting with the R Console and using it as a simple calculator for typing basic code.",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#using-r-console-as-a-calculator-length-000726",
    "href": "02-basic_building_blocks.html#using-r-console-as-a-calculator-length-000726",
    "title": "Introduction I",
    "section": "",
    "text": "[Watch on YouTube]\nThe R Console window (Panel 1) is where RStudio waits for you to tell it what to do. It displays the code you enter and the results of each command. You can type commands directly into this window for immediate execution.\nLet’s begin by using the Console as a basic calculator for addition (+), subtraction (-), multiplication (*), division (/), exponents (^), and other calculations.\nClick inside the R Console window, type 19+8, and press the Enter key (↵) to see the result. Then try the following calculations by typing them into the Console:\n\n# Perform addition\n19+8\n\n# Perform subtraction\n20-89\n\n# Perform multiplication\n18*20\n\n# Perform division\n27/3\n\n# To number to a power e.g., 2 raise to the power of 8\n2^8\n\n# Perform complex sums\n(5*(170-3.405)/91)+1002\n\n\n\n\n\n\n\nImportant\n\n\n\nThe text that follows a hash symbol # in the code chunk is a comment, not actual code. It explains what the line of code without the # is doing.\n\n\nIn addition to basic arithmetic operations, we can also use common mathematical functions such as exponentials and logarithms:\n\nexp() calculates the exponential\nlog() calculates the logarithm\n\nDo not worry about fully understanding these functions for now as you will likely use them later in Weeks 8 and 9 when transforming variables.\nTry the following by typing them into the R Console window:\n\n# use exp() to apply an exponential to a value\nexp(5) \n\n# use log() to transforrm a value on to a logarithm scale\nlog(3)",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#creating-basic-objects-and-assignment-operator-length-001259",
    "href": "02-basic_building_blocks.html#creating-basic-objects-and-assignment-operator-length-001259",
    "title": "Introduction I",
    "section": "",
    "text": "[Watch on YouTube]\nLet’s open an R Script file!\nNow that we are familiar with using the Console as a calculator, let’s build on this and learn one of the most important features in R: the Assignment Operator.\nThe arrow symbol &lt;- is called the Assignment Operator. You type it by pressing the less-than symbol &lt; followed by the hyphen -. It allows you to assign values to an object in R.\nObjects are stored quantities in RStudio’s environment. They can hold anything from numeric values to character strings. For example, to create a numeric object called x and assign it the value 3, type: x &lt;- 3. When you enter x in the Console and press Enter (↵), R will return the numeric value 3.\nSimilarly, to create a string object called y and assign it the text \"Hello!\", type: y &lt;- \"Hello!\" When you enter y in the Console, it will return the text value Hello!.\nNow, let’s create the objects a, b, c, and d and assign them numeric values. Perform the following by typing them into the R Console:\n\n# Create an object called 'a' and assign the value 17 to it\na &lt;- 17\n\n# Type the object 'a' in console as a command to return value 17\na\n\n# Create an object called 'b' and assign the value 10 to it\nb &lt;- 10\n\n# Type the object 'b' in console as a command to return value 10\nb\n\n# Create an object called 'c' and assign the value 9 to it\nc &lt;- 9\n\n# Type the object 'c' in console as a command to return value 9\nc\n\n# Create an object called 'd' and assign the value 8 to it\nd &lt;- 8\n\n# Type the object 'd' in console as a command to return value 8\nd\n\nNotice how the objects a, b, c and d and its value are listed and stored in RStudio’s environment panel. We can perform the following maths operations with these object values:\n\n# type the following and return an answer\n(a + b + c + d)/5\n\n# type the following and return an answer\n(5*(a-c)/d)^2\n\nLet us create more objects but this time we will assign character string(s) to them. Please note that when typing a string of characters as data you will need to cover them with quotation marks \"...\". For example, say we want to create a string object called y and assign it with some text \"Hello!\". We do this by typing y &lt;- \"Hello!\".\nTry these examples of assigning the following character text to an object:\nLet’s create more objects, but this time we will assign character strings to them. When typing a string of characters as data, you must enclose them in quotation marks \"...\".\nFor example, to create a string object called y and assign it the text \"Hello!\", type: y &lt;- \"Hello!\"\nTry the following examples to assign character text to objects:\n\n# Create an object called 'e' and assign the character string \"RStudio\"\ne &lt;- \"RStudio\"\n\n# Type the object 'e' in the console as a command to return \"RStudio\"\ne\n\n# Create an object called 'f', assign character string \"Hello world\" \nf &lt;- \"Hello world\"\n\n# Type the object 'f' in the console as a command to return \"Hello world\"\nf\n\n# Create an object called 'g' and assign \"Blade Runner is amazing\"\ng &lt;- \"Blade Runner is amazing\"\n\n# Type the object 'g' in the console to return the result\ng",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#how-to-identify-data-types-length-000829",
    "href": "02-basic_building_blocks.html#how-to-identify-data-types-length-000829",
    "title": "Introduction I",
    "section": "",
    "text": "[Watch on YouTube]\nIn programming, variables are used to store information, and each has a type determined by the kind of data it holds (e.g., integer, character, factor, logical). Assigning an integer makes the variable type “int.” A variable is simply a reserved memory location where values are stored.\nTo use R effectively, you need a solid understanding of its basic data types, data structures, and how to work with them.\nR has a range of data types. The most common ones are:\n\nnumeric (whole, real or decimal)\nlogical\ncharacter\nfactor\n\nBelow are some basic examples of data points that are classed as character, numeric, or integer values, etc.\n\ncharacter: “a”, “swc”\nnumeric: 2.0, 15.5\nlogical: TRUE, FALSE\nfactor: 2 levels “boy”, “girl” (text categories with assigned numbers as a label)\n\nYou can use the class function i.e., class() on any object to identify its data type. For example, using the class() function on existing objects we created early on (i.e., e and f) in section 1.4 tells us that its a character object.\n\ne &lt;- \"RStudio\"\nf &lt;- \"Hello world\"\n\n\nclass(f)\n\n[1] \"character\"\n\nclass(e)\n\n[1] \"character\"\n\n\nAnother example, using the class() function on existing objects we created early on (i.e., a and b) in section 1.4 tells us that its a numeric object.\n\na &lt;- 17\nb &lt;- 10\n\n\nclass(a)\n\n[1] \"numeric\"\n\nclass(b)\n\n[1] \"numeric\"\n\n\nWe are now familiar with using the console and assigning numeric and string to objects, and identifying their data type. Let’s learn who to enter data into RStudio and create our first data frame.",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#how-to-enter-data-and-create-variables-in-rstudio-length-001627",
    "href": "02-basic_building_blocks.html#how-to-enter-data-and-create-variables-in-rstudio-length-001627",
    "title": "Introduction I",
    "section": "",
    "text": "[Watch on YouTube]\nHere, we will learn some basics coding etiquettes creating a dataset from scratch using the two functions:\n\nc() combine function\ndata.frame(): data frame function\n\nAs you have already seen, RStudio is an object-oriented software package and so entering data is slightly different from the usual way of inputting information into a spreadsheet (e.g., Microsoft Excel). Here, you will need to enter the information as a Vector object before combining them into a Data Frame object.\nConsider this crude example of data containing the additional health information for 4 people. It contains the variable (or column) names id, name, height, weight and gender.\n\n\n\nid\nname\nheight\nweight\ngender\n\n\n\n\n1\nKofi\n1.65\n64.2\nM\n\n\n2\nHarry\n1.77\n80.3\nM\n\n\n3\nHuijun\n1.70\n58.7\nF\n\n\n4\nFatima\n1.68\n75.0\nF\n\n\n\nNow, when entering data to RStudio it is not like Microsoft Excel where we enter data into the cells of a spreadsheet. In RStudio, data is entered as a sequence of elements and listed inside an object called a vector.\nFor instance, if we have three age values of 12, 57 and 26 years, and we want to enter this in RStudio in that order, we need to use the combine function c() and combine these three elements into a vector object. Hence, the code will be c(12, 57, 26). We can assign this data by typing this code as age &lt;- c(12, 57, 26). Any time you type age into RStudio’s console it will hence return these three values as a vector unless you chose to overwrite it with different information.\nLet us look at this more closely with the id variable in the above data. Each person has a unique ID number from 1 to 4. We are going to list the numbers 1, 2, 3 and 4 as a sequence of elements into a vector using the combine function c() and then assign it as a vector object calling it id.\n\n# Create 'id' vector object \nid &lt;- c(1, 2, 3, 4)\n\n# Type the vector object 'id' in console to see output or press the 'run' button\nid\n\n[1] 1 2 3 4\n\n\nNow, let us enter the information the same way for the remaining columns for name, height, weight and gender like we did for id:\n\n# Create 'name' vector object\nname &lt;- c(\"Kofi\", \"Harry\", \"Huijun\", \"Fatima\")\nname\n\n[1] \"Kofi\"   \"Harry\"  \"Huijun\" \"Fatima\"\n\n# Create 'height' (in meters) vector object\nheight &lt;- c(1.65, 1.77, 1.70, 1.68)\nheight\n\n[1] 1.65 1.77 1.70 1.68\n\n# Create 'weight' (in kg) vector object\nweight &lt;- c(64.2, 80.3, 58.7, 75.0)\nweight\n\n[1] 64.2 80.3 58.7 75.0\n\n# Create 'gender' vector object\ngender &lt;- c(\"M\", \"M\", \"F\", \"F\")\ngender\n\n[1] \"M\" \"M\" \"F\" \"F\"\n\n\nNow, that we have the vector objects ready. Let us bring them together to create a proper dataset. This new object is called a Data frame. We need to list the vectors inside the data.frame() function. For example:\n\n# Create a dataset (data frame)\ndataset &lt;- data.frame(id, name, height, weight, gender)\n\n# Type the data frame object 'dataset' in console to print the output in console\ndataset\n\n  id   name height weight gender\n1  1   Kofi   1.65   64.2      M\n2  2  Harry   1.77   80.3      M\n3  3 Huijun   1.70   58.7      F\n4  4 Fatima   1.68   75.0      F\n\n\nYou can also see dataset in a data viewer, by using the View() function to see in a spreadsheet:\n\nView(dataset)\n\n\n\n\n\n\n\nImportant\n\n\n\nThe column ‘id’ is a numeric variable with integers. The second column ‘name’ is a text variable with strings. The third & fourth columns ‘height’ and ‘weight’ are examples of numeric variables with real numbers with continuous measures. The variable ‘gender’ is a text variable with strings – however, this type of variable is classed as a categorical variable as individuals were categorised as either ‘M’ and ‘F’.",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#how-do-we-create-a-variable-based-on-other-existing-variables-within-a-data-frame-length-002100",
    "href": "02-basic_building_blocks.html#how-do-we-create-a-variable-based-on-other-existing-variables-within-a-data-frame-length-002100",
    "title": "Introduction I",
    "section": "",
    "text": "[Watch on YouTube]\nTo access a variable by its name within a data frame, you will need to first type the name of the data frame followed by a $ (dollar sign), and then typing the variable’s name of interest. For instance, suppose you just want to see the height values in the Console viewer - you just type:\n\n# to access height - you need to type 'dataset$height'\ndataset$height\n\n[1] 1.65 1.77 1.70 1.68\n\n\nWe can use other columns or variables within our data frame to create another variable. This technique is essentially important when cleaning and managing data. From this dataset, it is possible to derive the body mass index bmi from height and weight using the formula:\n\n\\(BMI = weight/height^2\\)\n\nTo generate bmi into our data frame, we would need to access the height (m) and weight (kg) columns using the $ from the data frame its stored to, and apply the above formula as a code to generate the new bmi column:\n\n# Create 'bmi' in the data frame i.e.,'dataset' and calculate 'bmi'\n# using the $weight and $height\ndataset$bmi &lt;- dataset$weight/((dataset$height)^2)\n# View the data frame ‘dataset’ and you will see the new bmi variable inside\nView(dataset)\n\nYou can overwrite the height (m) column to change its units into centimeters by multiplying it to 100; equally, the weight (kg) column can be overwritten and converted from units of kilograms to grams by multiplying it to 1000.\n\n# using $height and *100 \ndataset$height &lt;- dataset$height*100\n# using $weight and *100\ndataset$weight &lt;- dataset$weight*1000\n# view updated dataset\ndataset\n\n  id   name height weight gender      bmi\n1  1   Kofi    165  64200      M 23.58127\n2  2  Harry    177  80300      M 25.63120\n3  3 Huijun    170  58700      F 20.31142\n4  4 Fatima    168  75000      F 26.57313",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "02-basic_building_blocks.html#saving-your-r-script",
    "href": "02-basic_building_blocks.html#saving-your-r-script",
    "title": "Introduction I",
    "section": "",
    "text": "Well done! You have learnt the basics of coding in RStudio - next week, we will learn further coding etiquettes for managing datasets which includes:\n\nImporting & exporting spreadsheets with RStudio\nSetting up work directories\nRow and column manipulations\nMerging two data frames.\n\nYou can now save your script for future use by clicking on the save icon in the menu bar.",
    "crumbs": [
      "Core Content",
      "Introduction I"
    ]
  },
  {
    "objectID": "01-what_is_rstudio.html",
    "href": "01-what_is_rstudio.html",
    "title": "What is RStudio (or R)?",
    "section": "",
    "text": "R (or RStudio) is a statistical programming package that allows users to carry out a wide range of statistical analyses. It can also function as GIS software, enabling various types of analysis on geographical data. In the same way, it can be used for data management and geoprocessing—for example, importing different types of data, whether non-spatial or spatial, and preparing them for analysis.\nThere are two versions:\n\n\n\n\n\n\n\n\n\nThe famous icon on the left is the version for R (Base), and the one on the right is the version for RStudio. Both software packages are the same. The only difference is that RStudio is attractive, intuitive, and more importantly, it is user-friendly than Base R. So, we will be using this version (i.e., RStudio) throughout this workshop.\nLet us talk about the installation of RStudio on your personal computer.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nRStudio is an open-source software, it is free. It is widely recommended in data science, scientific research, and technical communication because it is easy to access, download, and install.\nTo use RStudio, you must first install R (Base) before installing RStudio. Follow the steps below to install both programs for your operating system (Windows or Mac).\nSteps\n\nDownload the R (Base) installer from the table below, then run the file to complete the installation.\nNext, download the RStudio installer from the table below, then run the file to complete the installation.\n\n\n\n\nOS User type\nR (Base)\nRStudio Desktop\n\n\n\n\nWindows\nR-4.5.1-win.exe\nRStudio-2025.09.0-387.exe\n\n\nMAC (Intel)\nR-4.5.1-x86_64.pkg\nRStudio-2025.09.0-387.dmg\n\n\nMAC (M1, M2 or M3)\nR-4.5.1-arm64.pkg\nRStudio-2025.09.0-387.dmg\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nR (Base) is very particular about the operating system! Please be sure to use the correct installer for your computer:\n\nWindows users: use the files in the first row.\nMac (Intel) users: use the files in the second row.\nMac (M1, M2, or M3 chip) users: use the files in the third row.\n\n\n\nThis section covers how to download and install RStudio for it to be used locally on your machine. There are several ways to access RStudio:\n\nDirectly through UCL Workstation PC\nRemotely through the UCL Desktop@Anywhere remote service with your laptop.\n\nLet us quickly go through these options.\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nGo to any PC cluster in UCL and simply log on to a computer. Use the UCL Applications tool to access the desired software.\n\n\n\n\n\n\n\n\n\n\n\n\n[Watch on YouTube]\nTo use RStudio (or any other software which UCL provides as service to students) remotely from your laptop/PC/tablet, you can:\n\nGo to https://www.ucl.ac.uk/isd/services/computers/remote-access/desktopucl-anywhere.\nClick on the blue button that says: “Log in to Desktop @ UCL Anywhere.”\nYou will be prompted to enter your UCL username (username@ucl.ac.uk) and password. Enter the correct credentials to gain access to the remote portal.\nIf you see the option “Use Web Browser”, select it to run the remote functions directly in your browser without installing the Citrix Workspace application.\nYou should now see a Desktop @ UCL Anywhere button – click this button to complete the login. At this point, it will feel as though you are using a UCL workstation in a cluster room or library, but remotely.\nOn the desktop, click the UCL Applications icon and search for RStudio.\nSelect the latest version available (check the year) and open it with a single click (not multiple clicks).\n\nVoilà! You now have remote access to RStudio.",
    "crumbs": [
      "Getting Started",
      "What is RStudio (or R)?"
    ]
  },
  {
    "objectID": "01-what_is_rstudio.html#rstudio-and-downloading-it-length-001135",
    "href": "01-what_is_rstudio.html#rstudio-and-downloading-it-length-001135",
    "title": "What is RStudio (or R)?",
    "section": "",
    "text": "[Watch on YouTube]\nRStudio is an open-source software, it is free. It is widely recommended in data science, scientific research, and technical communication because it is easy to access, download, and install.\nTo use RStudio, you must first install R (Base) before installing RStudio. Follow the steps below to install both programs for your operating system (Windows or Mac).\nSteps\n\nDownload the R (Base) installer from the table below, then run the file to complete the installation.\nNext, download the RStudio installer from the table below, then run the file to complete the installation.\n\n\n\n\nOS User type\nR (Base)\nRStudio Desktop\n\n\n\n\nWindows\nR-4.5.1-win.exe\nRStudio-2025.09.0-387.exe\n\n\nMAC (Intel)\nR-4.5.1-x86_64.pkg\nRStudio-2025.09.0-387.dmg\n\n\nMAC (M1, M2 or M3)\nR-4.5.1-arm64.pkg\nRStudio-2025.09.0-387.dmg\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nR (Base) is very particular about the operating system! Please be sure to use the correct installer for your computer:\n\nWindows users: use the files in the first row.\nMac (Intel) users: use the files in the second row.\nMac (M1, M2, or M3 chip) users: use the files in the third row.\n\n\n\nThis section covers how to download and install RStudio for it to be used locally on your machine. There are several ways to access RStudio:\n\nDirectly through UCL Workstation PC\nRemotely through the UCL Desktop@Anywhere remote service with your laptop.\n\nLet us quickly go through these options.",
    "crumbs": [
      "Getting Started",
      "What is RStudio (or R)?"
    ]
  },
  {
    "objectID": "01-what_is_rstudio.html#access-through-workstation-ucl-applications-store-length-000500",
    "href": "01-what_is_rstudio.html#access-through-workstation-ucl-applications-store-length-000500",
    "title": "What is RStudio (or R)?",
    "section": "",
    "text": "[Watch on YouTube]\nGo to any PC cluster in UCL and simply log on to a computer. Use the UCL Applications tool to access the desired software.",
    "crumbs": [
      "Getting Started",
      "What is RStudio (or R)?"
    ]
  },
  {
    "objectID": "01-what_is_rstudio.html#remotely-access-through-ucl-desktopanywhere-length-000934",
    "href": "01-what_is_rstudio.html#remotely-access-through-ucl-desktopanywhere-length-000934",
    "title": "What is RStudio (or R)?",
    "section": "",
    "text": "[Watch on YouTube]\nTo use RStudio (or any other software which UCL provides as service to students) remotely from your laptop/PC/tablet, you can:\n\nGo to https://www.ucl.ac.uk/isd/services/computers/remote-access/desktopucl-anywhere.\nClick on the blue button that says: “Log in to Desktop @ UCL Anywhere.”\nYou will be prompted to enter your UCL username (username@ucl.ac.uk) and password. Enter the correct credentials to gain access to the remote portal.\nIf you see the option “Use Web Browser”, select it to run the remote functions directly in your browser without installing the Citrix Workspace application.\nYou should now see a Desktop @ UCL Anywhere button – click this button to complete the login. At this point, it will feel as though you are using a UCL workstation in a cluster room or library, but remotely.\nOn the desktop, click the UCL Applications icon and search for RStudio.\nSelect the latest version available (check the year) and open it with a single click (not multiple clicks).\n\nVoilà! You now have remote access to RStudio.",
    "crumbs": [
      "Getting Started",
      "What is RStudio (or R)?"
    ]
  },
  {
    "objectID": "03-handling_data_structures.html",
    "href": "03-handling_data_structures.html",
    "title": "Introduction II",
    "section": "",
    "text": "By the end of this tutorial, you will be able to:\n\nSet your working directory on Mac and Windows\nImport a .csv file into RStudio\nUnderstand the structure of a data frame (rows and columns)\nFilter data using both numeric and categorical variables\nCombine multiple conditions with logical operators to perform further filtering of data\nExport data back into a .csv file\n\nThese objectives, combined with those from last week, serve as a gateway to learning RStudio and building a strong foundation. Let us begin!\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nBefore we do anything - make sure to have downloaded the dataset for this computer session by clicking [HERE]. It contains the file Primary Schools in Ealing.csv - this comma separated values (CSV) file contains the data needed to follow today’s tutorial.\nInstructions In your computer, do the following:\n\nCreate a new folder on your desktop and rename the folder GEOG0186\nNext, create a new sub-folder within GEOG0186 and rename it as Week 2.\nFrom the downloaded folder Dataset for Week 2, make sure to unzip and transfer ALL the datasets directly to the Week 2 folder.\n\n\n\nThis part is probably the most important section of this tutorial.We are going to learn how to set the Work Directory. This basically refers to us connecting the RStudio to the folder containing our dataset that we want to import and analyse.\nDoing this allows the user to tell RStudio to open data from a folder located somewhere in our computer using something called the Path Location.\nThe Path Location specifies the whereabouts of the data file(s) stored within a computer. Setting your directory in RStudio, in code, beforehand makes life incredibly easier (than the usual point-and-click approach) in terms of finding, importing, exporting and saving data in and out of RStudio.\nTo illustrate what a Path Location is – suppose on my desktop’s dashboard on a Mac/Windows there is a folder called GEOG0186, and within that folder, exists another folder called Week 2. Finally, suppose a comma separated value (.csv) data file called Primary Schools in Ealing.csv is store in this folder i.e., Week 2. If via RStudio you want to open this CSV data file located in within the Week 2 folder. You will need to first set the path to Week 2 in RStudio using the setwd() function.\n\n\nFor MAC users, the path location would be written as follows, \"/Users/accountName/Desktop/GEOG0186/Week 2\". You can access this piece of information simply by:\n\nOpen the folder GEOG0186\nRight-clicking on the folder Week 2 in which the files are stored. A drop-down scroll menu will appear (see image below).\n\n\n\n\n\n\n\n\n\n\n\nHold the Option (⌥) button on your keyboard down, and click Copy “Week 2” as Pathname\nPaste the copied path name into the function setwd() and run the code\n\nFor Mac, the setwd() is as follows:\n\n# set work directory in macs\nsetwd(\"/Users/accountName/Desktop/GEOG0186/Week 2\")\n\n\n\n\nFor Windows user, its marginally different - the path location to this folder on a Windows machine would be written as follows, \"C:/Users/accountName/Desktop/GEOG00186/Week 2\". You can access this piece of information simply by:\n\nOpen the GEOG0186 folder to reveal the Week 2 folder.\nOpen the Week 2 folder where your downloaded data files have been stored.\nNow, click on the browser bar at the top which shows GEOG0186 &gt; Week 2. This should highlight and show \"C:\\Users\\accountName\\Desktop\\GEOG0186\\Week 2\" (see image below).\n\n\n\n\n\n\n\n\n\n\n\nNow, copy \"C:\\Users\\accountName\\Desktop\\GEOG0186\\Week 2\" and paste the path name into the setwd() function in your R script.\nLastly, change all the back slashes \\ in the path name to forward slashes / and run the code. It should look like this: setwd(\"C:/Users/accountName/Desktop/GEOG0186/Week 2\").\n\nFor Windows, the setwd() is as follows:\n\n# set work directory in windows\nsetwd(\"C:/Users/accountName/Desktop/GEOG0013/Week 2\")\n\nIf you type the code getwd() and quickly run it through console - if it returns the inputted path location - then you have done this correctly.\nNow, let us learn how to import a CSV data into RStudio.\n\n\n\n\nA CSV file (short for Comma-Separated Values) is one of the most common formats for storing data. Each row is a single record or observation. For example, it can be details about a person, household unit, a city, or even disease events; and while each column is a variable (for example, population counts, temperature readings, or region name etc.).\nFor this exercise, we will be using the Primary Schools in Ealing.csv dataset to build intuition on understanding the basics of data structure.\nSince, we have already set the work directory to folder containing this dataset. Importing it into RStudio would be a piece of cake.\nTo read a CSV file into R, we can use the read.csv() function import it as a data frame object named school_data using the assignment operator (&lt;-):\n\n# Load data into RStudio. The spreadsheet is stored in the object called 'school_data'\nschool_data &lt;- read.csv(file = \"Primary Schools in Ealing.csv\")\n\nThe loaded dataset contains up to 58 primary schools with the following variables:\n\nSchoolName: Name of school in Ealing (character)\nType: School classified as a “Primary” school (character)\nNumberBoys: Total number of boys in a primary school (integer/)\nNumberGirls: Total number of girls in a primary school (integer)\nTotalStudents: Total number of students in a primary school (integer)\nOfstedGrade: Overall school performance where 1 = “excellent”, 2 = “good”, 3 = “requires improvement”, and 4 = “inadequate” (factor/categorical)\n\n\n\n\n\n\n\nImportant\n\n\n\nWe have covered a lot of the basics in RStudio - i.e., setting the work directory and importing a spreadsheet that is CSV format. The things shown in this section will be used frequently in all future tutorials. So, get used to using setwd() and read.csv().\n\n\n\n\n\n\n\nOne can examine the structure of the imported data with the following basic functions.\n\nstr(): tells the user which columns in the data frame are character or numeric variables, and so on.\nnames(): prints the entire names of the columns present in the data frame\nhead(): allows the user to see the first top 10 rows of the data frame\ntail(): allows the user to see the last bottom 10 rows of the data frame\nncol(): tells the user the total number of columns present in the data frame\nnrow(): tells the user the total number of observations (or rows) present in the data frame\ndim(): prints both the total number of observations (or rows) and columns present in the data frame.\n\nUsing the following code str() will display the structure of school_data data frame object and some of its contents:\n\nstr(school_data)\n\n'data.frame':   58 obs. of  6 variables:\n $ SchoolName   : chr  \"Berrymede Junior School\" \"East Acton Primary School\" \"Oldfield Primary School\" \"North Ealing Primary School\" ...\n $ Type         : chr  \"Primary\" \"Primary\" \"Primary\" \"Primary\" ...\n $ NumberBoys   : int  180 160 225 340 265 230 155 285 185 150 ...\n $ NumberGirls  : int  200 165 240 355 205 205 180 290 190 125 ...\n $ TotalStudents: int  377 329 465 697 471 435 335 573 373 273 ...\n $ OfstedGrade  : int  2 2 2 2 2 2 2 3 2 2 ...\n\n\nUsing the following code head() or tail() will display the first or last 10 observations, respectively, in the school_data data frame object:\n\nhead(school_data)\n\n                   SchoolName    Type NumberBoys NumberGirls TotalStudents\n1     Berrymede Junior School Primary        180         200           377\n2   East Acton Primary School Primary        160         165           329\n3     Oldfield Primary School Primary        225         240           465\n4 North Ealing Primary School Primary        340         355           697\n5    St John's Primary School Primary        265         205           471\n6    St Mark's Primary School Primary        230         205           435\n  OfstedGrade\n1           2\n2           2\n3           2\n4           2\n5           2\n6           2\n\ntail(school_data)\n\n                                       SchoolName    Type NumberBoys\n53           St Vincent's Catholic Primary School Primary        240\n54 Edward Betham Church of England Primary School Primary        230\n55                    Dormers Wells Junior School Primary        205\n56                          Grange Primary School Primary        415\n57                      Petts Hill Primary School Primary        125\n58                       Khalsa VA Primary School Primary        235\n   NumberGirls TotalStudents OfstedGrade\n53         260           498           2\n54         240           471           2\n55         200           409           3\n56         385           800           2\n57         130           254           2\n58         180           412           2\n\n\nYou can inspect the data frame object in a Data viewer by using the View() syntax. This should cause the Data viewer window to open showing the full dataset:\n\nView(school_data)\n\nThe dataset has 58 rows (primary school observations) and 6 columns (variables). You can use nrow, ncol and dim() functions separately to report the size of your data frame:\n\n# total number of rows\nnrow(school_data)\n\n[1] 58\n\n# total number of columns\nncol(school_data)\n\n[1] 6\n\n# full size of data frame i.e., total rows and columns\ndim(school_data)\n\n[1] 58  6\n\n\n\n\n\n\n\nOne can subset or restrict the data frame by specifying which row(s) and column(s) to keep or discard using this standard square bracket syntax dataframe[Row, Column].\nBreakdown of dataframe[Row, Column]code:\n\nThe bit in the code that corresponds to dataframe from dataframe[Row, Column] represents the name data frame object.\nWhere it states Row within the square brackets specifies the subsetting, or filter action to be carried out based on rows.\nWhere it states Column within the square brackets specifies the subsetting, or filter action to be carried out based on columns.\n\nLet’s take our school_data data frame as an example - if we select the first row (row number 1) and the first column (SchoolName), we have essentially filter out only the school name Berrymede Junior School Primary:\n\ndata11 &lt;- school_data[1, 1]\ndata11\n\n[1] \"Berrymede Junior School\"\n\n\nIf you select only the first row (row number 1) and do not specific any numbers for the columns, you will be filtering out the entire row for row number 1:\n\nrow1 &lt;- school_data[1, ]\nrow1\n\n               SchoolName    Type NumberBoys NumberGirls TotalStudents\n1 Berrymede Junior School Primary        180         200           377\n  OfstedGrade\n1           2\n\n\nIn the same vein, if you select only the column and do not specific any numbers for the rows, you will be filtering out the entire column (i.e., SchoolName variable) for column number 1 which is the list of all primary school names:\n\ncolumn1 &lt;- school_data[, 1]\ncolumn1\n\n [1] \"Berrymede Junior School\"                           \n [2] \"East Acton Primary School\"                         \n [3] \"Oldfield Primary School\"                           \n [4] \"North Ealing Primary School\"                       \n [5] \"St John's Primary School\"                          \n [6] \"St Mark's Primary School\"                          \n [7] \"West Twyford Primary School\"                       \n [8] \"West Acton Primary School\"                         \n [9] \"Mayfield Primary School\"                           \n[10] \"Beaconsfield Primary and Nursery School\"           \n[11] \"Coston Primary School\"                             \n[12] \"Downe Manor Primary School\"                        \n[13] \"Drayton Green Primary School\"                      \n[14] \"North Primary School\"                              \n[15] \"Ravenor Primary School\"                            \n[16] \"Selborne Primary School\"                           \n[17] \"Hambrough Primary School\"                          \n[18] \"Hobbayne Primary School\"                           \n[19] \"John Perryn Primary School\"                        \n[20] \"Southfield Primary School\"                         \n[21] \"Allenby Primary School\"                            \n[22] \"Blair Peach Primary School\"                        \n[23] \"Clifton Primary School\"                            \n[24] \"Dairy Meadow Primary School\"                       \n[25] \"Derwentwater Primary School\"                       \n[26] \"Durdans Park Primary School\"                       \n[27] \"Fielding Primary School\"                           \n[28] \"Gifford Primary School\"                            \n[29] \"Greenwood Primary School\"                          \n[30] \"Havelock Primary School and Nursery\"               \n[31] \"Horsenden Primary School\"                          \n[32] \"Willow Tree Primary School\"                        \n[33] \"Lady Margaret Primary School\"                      \n[34] \"Little Ealing Primary School\"                      \n[35] \"Oaklands Primary School\"                           \n[36] \"Perivale Primary School\"                           \n[37] \"Stanhope Primary School\"                           \n[38] \"Viking Primary School\"                             \n[39] \"Wolf Fields Primary School\"                        \n[40] \"Featherstone Primary and Nursery School\"           \n[41] \"Three Bridges Primary School\"                      \n[42] \"Montpelier Primary School\"                         \n[43] \"Tudor Primary School\"                              \n[44] \"Hathaway Primary School\"                           \n[45] \"Vicar's Green Primary School\"                      \n[46] \"Mount Carmel Catholic Primary School\"              \n[47] \"Our Lady of the Visitation Catholic Primary School\"\n[48] \"St John Fisher Catholic Primary School\"            \n[49] \"St Anselm's Catholic Primary School\"               \n[50] \"St Gregory's Catholic Primary School\"              \n[51] \"St Joseph's Catholic Primary School\"               \n[52] \"St Raphael's Catholic Primary School\"              \n[53] \"St Vincent's Catholic Primary School\"              \n[54] \"Edward Betham Church of England Primary School\"    \n[55] \"Dormers Wells Junior School\"                       \n[56] \"Grange Primary School\"                             \n[57] \"Petts Hill Primary School\"                         \n[58] \"Khalsa VA Primary School\"                          \n\n\nWhat if we wanted to filter the following rows numbered 2, 7 and 19 from the school_data data frame object as highlighted in the image below?\n\n\n\n\n\n\n\n\n\nWe can use the combine function i.e., c() to list those numbers in the square brackets:\n\nrows_filter &lt;- school_data[c(2, 7, 19), ]\nrows_filter\n\n                    SchoolName    Type NumberBoys NumberGirls TotalStudents\n2    East Acton Primary School Primary        160         165           329\n7  West Twyford Primary School Primary        155         180           335\n19  John Perryn Primary School Primary        230         230           460\n   OfstedGrade\n2            2\n7            2\n19           2\n\n\nLikewise, what if we wanted to filter the following columns numbered 1, 5 and 6 from the school_data data frame object as highlighted in the image below?\n\n\n\n\n\n\n\n\n\nWe can also use the combine function i.e., c() to list those numbers for the columns within that square brackets:\n\ncolumns_filter &lt;- school_data[ , c(1, 5, 6)]\ncolumns_filter\n\n                                           SchoolName TotalStudents OfstedGrade\n1                             Berrymede Junior School           377           2\n2                           East Acton Primary School           329           2\n3                             Oldfield Primary School           465           2\n4                         North Ealing Primary School           697           2\n5                            St John's Primary School           471           2\n6                            St Mark's Primary School           435           2\n7                         West Twyford Primary School           335           2\n8                           West Acton Primary School           573           3\n9                             Mayfield Primary School           373           2\n10            Beaconsfield Primary and Nursery School           273           2\n11                              Coston Primary School           450           2\n12                         Downe Manor Primary School           471           2\n13                       Drayton Green Primary School           354           2\n14                               North Primary School           419           1\n15                             Ravenor Primary School           610           2\n16                            Selborne Primary School           554           2\n17                           Hambrough Primary School           520           2\n18                            Hobbayne Primary School           641           2\n19                         John Perryn Primary School           460           2\n20                          Southfield Primary School           518           2\n21                             Allenby Primary School           263           2\n22                         Blair Peach Primary School           506           2\n23                             Clifton Primary School           400           2\n24                        Dairy Meadow Primary School           469           2\n25                        Derwentwater Primary School           708           2\n26                        Durdans Park Primary School           528           2\n27                            Fielding Primary School           891           2\n28                             Gifford Primary School           866           1\n29                           Greenwood Primary School           555           2\n30                Havelock Primary School and Nursery           434           1\n31                           Horsenden Primary School           872           2\n32                         Willow Tree Primary School           759           2\n33                       Lady Margaret Primary School           671           2\n34                       Little Ealing Primary School           669           2\n35                            Oaklands Primary School           552           2\n36                            Perivale Primary School           467           2\n37                            Stanhope Primary School           598           2\n38                              Viking Primary School           275           2\n39                         Wolf Fields Primary School           421           2\n40            Featherstone Primary and Nursery School           722           2\n41                       Three Bridges Primary School           455           2\n42                          Montpelier Primary School           682           1\n43                               Tudor Primary School           453           2\n44                            Hathaway Primary School           346           4\n45                       Vicar's Green Primary School           342           1\n46               Mount Carmel Catholic Primary School           457           2\n47 Our Lady of the Visitation Catholic Primary School           471           3\n48             St John Fisher Catholic Primary School           467           1\n49                St Anselm's Catholic Primary School           239           3\n50               St Gregory's Catholic Primary School           619           2\n51                St Joseph's Catholic Primary School           558           2\n52               St Raphael's Catholic Primary School           589           2\n53               St Vincent's Catholic Primary School           498           2\n54     Edward Betham Church of England Primary School           471           2\n55                        Dormers Wells Junior School           409           3\n56                              Grange Primary School           800           2\n57                          Petts Hill Primary School           254           2\n58                           Khalsa VA Primary School           412           2\n\n\nWhat if we wanted to filter on rows numbered 2, 7 and 19, as well as columns numbered 1, 5 and 6 from that school_data data frame object as highlighted in the image below?\n\n\n\n\n\n\n\n\n\n\nfull_filter &lt;- school_data[c(2, 7, 19) , c(1, 5, 6)]\nfull_filter\n\n                    SchoolName TotalStudents OfstedGrade\n2    East Acton Primary School           329           2\n7  West Twyford Primary School           335           2\n19  John Perryn Primary School           460           2\n\n\nNot too shabby! So far, you have been shown how to do some create subset of data by filtering rows and columns. Let’s take it up a notch on filtering based on row Logical Operators to create conditions.\n\n\n\nOften, we want to filter based on more than one condition — for example, “cities in England and with a population over 600000”. RStudio uses logical operators to combine these conditions:\n\n\n\n\n\n\n\n\n\nOperator\nMeaning\nExample\nDescription\n\n\n\n\n==\nEqual to\ncountry == \"England\"\nTrue if the country is England\n\n\n!=\nNot Equal to\ncountry != \"England\"\nTrue if for all except England\n\n\n&gt;\nGreater than\npopulation &gt; 600000\nTrue if population is above 600000\n\n\n&lt;\nLess than\npopulation &lt; 600000\nTrue if population is under 600000\n\n\n&gt;=\nGreater than or eqaul to\npopulation &gt;= 600000\nTrue if population is equal to 600000 or more\n\n\n&lt;=\nLess than or equal to\npopulation &lt;= 600000\nTrue if population is equal to 600000 or less\n\n\n&\nAND\ncountry == \"England\" & population &lt;= 600000\nBoth conditions are true\n\n\n|\nOR\ncountry == \"England\" | country == \"Wales\"\nTrue for either England or Wales\n\n\n\nLet’s illustrate with the school_data object. We are interested in primary schools with a total of 500 hundred or more students. This operation is always row-based. We will need to use the $ to call the column TotalStudents and the logical operator for this filter is &gt;=:\n\nschools_500plus &lt;- school_data[school_data$TotalStudents &gt;= 500, ]\nschools_500plus\n\n                                SchoolName    Type NumberBoys NumberGirls\n4              North Ealing Primary School Primary        340         355\n8                West Acton Primary School Primary        285         290\n15                  Ravenor Primary School Primary        315         295\n16                 Selborne Primary School Primary        275         280\n17                Hambrough Primary School Primary        275         245\n18                 Hobbayne Primary School Primary        340         300\n20               Southfield Primary School Primary        275         245\n22              Blair Peach Primary School Primary        265         245\n25             Derwentwater Primary School Primary        335         370\n26             Durdans Park Primary School Primary        275         250\n27                 Fielding Primary School Primary        480         410\n28                  Gifford Primary School Primary        435         435\n29                Greenwood Primary School Primary        290         265\n31                Horsenden Primary School Primary        440         435\n32              Willow Tree Primary School Primary        385         370\n33            Lady Margaret Primary School Primary        360         310\n34            Little Ealing Primary School Primary        345         325\n35                 Oaklands Primary School Primary        290         260\n37                 Stanhope Primary School Primary        305         295\n40 Featherstone Primary and Nursery School Primary        365         360\n42               Montpelier Primary School Primary        350         330\n50    St Gregory's Catholic Primary School Primary        305         310\n51     St Joseph's Catholic Primary School Primary        295         265\n52    St Raphael's Catholic Primary School Primary        325         265\n56                   Grange Primary School Primary        415         385\n   TotalStudents OfstedGrade\n4            697           2\n8            573           3\n15           610           2\n16           554           2\n17           520           2\n18           641           2\n20           518           2\n22           506           2\n25           708           2\n26           528           2\n27           891           2\n28           866           1\n29           555           2\n31           872           2\n32           759           2\n33           671           2\n34           669           2\n35           552           2\n37           598           2\n40           722           2\n42           682           1\n50           619           2\n51           558           2\n52           589           2\n56           800           2\n\n\nWhat if were interested in primary schools with an OFSTED score of 1 (Excellent). Again, this operation is row-based and so we will need to use the $ to call the column OfstedGrade and the logical operator for this filter is ==:\n\nschools_ofsted1 &lt;- school_data[school_data$OfstedGrade == 1, ]\nschools_ofsted1\n\n                               SchoolName    Type NumberBoys NumberGirls\n14                   North Primary School Primary        215         205\n28                 Gifford Primary School Primary        435         435\n30    Havelock Primary School and Nursery Primary        245         190\n42              Montpelier Primary School Primary        350         330\n45           Vicar's Green Primary School Primary        165         180\n48 St John Fisher Catholic Primary School Primary        225         240\n   TotalStudents OfstedGrade\n14           419           1\n28           866           1\n30           434           1\n42           682           1\n45           342           1\n48           467           1\n\n\nHere is an example of combining such logical operators - select schools that have more than 650 students and with an OFSTED score of 2.\n\n# logical operators is &gt;, &, ==\nschools_650_ofsted2 &lt;- school_data[school_data$TotalStudents &gt; 650 & school_data$OfstedGrade == 2, ]\nschools_650_ofsted2\n\n                                SchoolName    Type NumberBoys NumberGirls\n4              North Ealing Primary School Primary        340         355\n25             Derwentwater Primary School Primary        335         370\n27                 Fielding Primary School Primary        480         410\n31                Horsenden Primary School Primary        440         435\n32              Willow Tree Primary School Primary        385         370\n33            Lady Margaret Primary School Primary        360         310\n34            Little Ealing Primary School Primary        345         325\n40 Featherstone Primary and Nursery School Primary        365         360\n56                   Grange Primary School Primary        415         385\n   TotalStudents OfstedGrade\n4            697           2\n25           708           2\n27           891           2\n31           872           2\n32           759           2\n33           671           2\n34           669           2\n40           722           2\n56           800           2\n\n\nI am sure you now get the gist of what is happening here with these logical statements for subsetting, or filtering data accordingly. We are now in the final stretch - let us learn how to save and export a dataset as a CSV spreadsheet.\n\n\n\n\n\nThis operation is very easy to perform. Once you have created your filtered data, you can use the following function write.csv() to save it as a new CSV file:\n\nwrite.csv(schools_650_ofsted2, file = \"Filtered_example_data.csv\", row.names = FALSE)\n\nThe above syntax should save a new CSV file named as Filtered_example_data.csv. Do not forget to save your R-script!\n\n\n\nYou have learned the following:\n\nSet your working directory for Windows/MAC\nImport and explore data\nUnderstand rows and columns\nFilter data using numeric and categorical variables\nCombine filters with logical operators\nExport your results to a new CSV file",
    "crumbs": [
      "Core Content",
      "Introduction II"
    ]
  },
  {
    "objectID": "03-handling_data_structures.html#learning-objectives",
    "href": "03-handling_data_structures.html#learning-objectives",
    "title": "Introduction II",
    "section": "",
    "text": "By the end of this tutorial, you will be able to:\n\nSet your working directory on Mac and Windows\nImport a .csv file into RStudio\nUnderstand the structure of a data frame (rows and columns)\nFilter data using both numeric and categorical variables\nCombine multiple conditions with logical operators to perform further filtering of data\nExport data back into a .csv file\n\nThese objectives, combined with those from last week, serve as a gateway to learning RStudio and building a strong foundation. Let us begin!",
    "crumbs": [
      "Core Content",
      "Introduction II"
    ]
  },
  {
    "objectID": "03-handling_data_structures.html#setting-the-working-directory-to-datasets",
    "href": "03-handling_data_structures.html#setting-the-working-directory-to-datasets",
    "title": "Introduction II",
    "section": "",
    "text": "Warning\n\n\n\nBefore we do anything - make sure to have downloaded the dataset for this computer session by clicking [HERE]. It contains the file Primary Schools in Ealing.csv - this comma separated values (CSV) file contains the data needed to follow today’s tutorial.\nInstructions In your computer, do the following:\n\nCreate a new folder on your desktop and rename the folder GEOG0186\nNext, create a new sub-folder within GEOG0186 and rename it as Week 2.\nFrom the downloaded folder Dataset for Week 2, make sure to unzip and transfer ALL the datasets directly to the Week 2 folder.\n\n\n\nThis part is probably the most important section of this tutorial.We are going to learn how to set the Work Directory. This basically refers to us connecting the RStudio to the folder containing our dataset that we want to import and analyse.\nDoing this allows the user to tell RStudio to open data from a folder located somewhere in our computer using something called the Path Location.\nThe Path Location specifies the whereabouts of the data file(s) stored within a computer. Setting your directory in RStudio, in code, beforehand makes life incredibly easier (than the usual point-and-click approach) in terms of finding, importing, exporting and saving data in and out of RStudio.\nTo illustrate what a Path Location is – suppose on my desktop’s dashboard on a Mac/Windows there is a folder called GEOG0186, and within that folder, exists another folder called Week 2. Finally, suppose a comma separated value (.csv) data file called Primary Schools in Ealing.csv is store in this folder i.e., Week 2. If via RStudio you want to open this CSV data file located in within the Week 2 folder. You will need to first set the path to Week 2 in RStudio using the setwd() function.\n\n\nFor MAC users, the path location would be written as follows, \"/Users/accountName/Desktop/GEOG0186/Week 2\". You can access this piece of information simply by:\n\nOpen the folder GEOG0186\nRight-clicking on the folder Week 2 in which the files are stored. A drop-down scroll menu will appear (see image below).\n\n\n\n\n\n\n\n\n\n\n\nHold the Option (⌥) button on your keyboard down, and click Copy “Week 2” as Pathname\nPaste the copied path name into the function setwd() and run the code\n\nFor Mac, the setwd() is as follows:\n\n# set work directory in macs\nsetwd(\"/Users/accountName/Desktop/GEOG0186/Week 2\")\n\n\n\n\nFor Windows user, its marginally different - the path location to this folder on a Windows machine would be written as follows, \"C:/Users/accountName/Desktop/GEOG00186/Week 2\". You can access this piece of information simply by:\n\nOpen the GEOG0186 folder to reveal the Week 2 folder.\nOpen the Week 2 folder where your downloaded data files have been stored.\nNow, click on the browser bar at the top which shows GEOG0186 &gt; Week 2. This should highlight and show \"C:\\Users\\accountName\\Desktop\\GEOG0186\\Week 2\" (see image below).\n\n\n\n\n\n\n\n\n\n\n\nNow, copy \"C:\\Users\\accountName\\Desktop\\GEOG0186\\Week 2\" and paste the path name into the setwd() function in your R script.\nLastly, change all the back slashes \\ in the path name to forward slashes / and run the code. It should look like this: setwd(\"C:/Users/accountName/Desktop/GEOG0186/Week 2\").\n\nFor Windows, the setwd() is as follows:\n\n# set work directory in windows\nsetwd(\"C:/Users/accountName/Desktop/GEOG0013/Week 2\")\n\nIf you type the code getwd() and quickly run it through console - if it returns the inputted path location - then you have done this correctly.\nNow, let us learn how to import a CSV data into RStudio.",
    "crumbs": [
      "Core Content",
      "Introduction II"
    ]
  },
  {
    "objectID": "03-handling_data_structures.html#how-to-import-a-dataset-into-rstudio",
    "href": "03-handling_data_structures.html#how-to-import-a-dataset-into-rstudio",
    "title": "Introduction II",
    "section": "",
    "text": "A CSV file (short for Comma-Separated Values) is one of the most common formats for storing data. Each row is a single record or observation. For example, it can be details about a person, household unit, a city, or even disease events; and while each column is a variable (for example, population counts, temperature readings, or region name etc.).\nFor this exercise, we will be using the Primary Schools in Ealing.csv dataset to build intuition on understanding the basics of data structure.\nSince, we have already set the work directory to folder containing this dataset. Importing it into RStudio would be a piece of cake.\nTo read a CSV file into R, we can use the read.csv() function import it as a data frame object named school_data using the assignment operator (&lt;-):\n\n# Load data into RStudio. The spreadsheet is stored in the object called 'school_data'\nschool_data &lt;- read.csv(file = \"Primary Schools in Ealing.csv\")\n\nThe loaded dataset contains up to 58 primary schools with the following variables:\n\nSchoolName: Name of school in Ealing (character)\nType: School classified as a “Primary” school (character)\nNumberBoys: Total number of boys in a primary school (integer/)\nNumberGirls: Total number of girls in a primary school (integer)\nTotalStudents: Total number of students in a primary school (integer)\nOfstedGrade: Overall school performance where 1 = “excellent”, 2 = “good”, 3 = “requires improvement”, and 4 = “inadequate” (factor/categorical)\n\n\n\n\n\n\n\nImportant\n\n\n\nWe have covered a lot of the basics in RStudio - i.e., setting the work directory and importing a spreadsheet that is CSV format. The things shown in this section will be used frequently in all future tutorials. So, get used to using setwd() and read.csv().",
    "crumbs": [
      "Core Content",
      "Introduction II"
    ]
  },
  {
    "objectID": "03-handling_data_structures.html#data-structure",
    "href": "03-handling_data_structures.html#data-structure",
    "title": "Introduction II",
    "section": "",
    "text": "One can examine the structure of the imported data with the following basic functions.\n\nstr(): tells the user which columns in the data frame are character or numeric variables, and so on.\nnames(): prints the entire names of the columns present in the data frame\nhead(): allows the user to see the first top 10 rows of the data frame\ntail(): allows the user to see the last bottom 10 rows of the data frame\nncol(): tells the user the total number of columns present in the data frame\nnrow(): tells the user the total number of observations (or rows) present in the data frame\ndim(): prints both the total number of observations (or rows) and columns present in the data frame.\n\nUsing the following code str() will display the structure of school_data data frame object and some of its contents:\n\nstr(school_data)\n\n'data.frame':   58 obs. of  6 variables:\n $ SchoolName   : chr  \"Berrymede Junior School\" \"East Acton Primary School\" \"Oldfield Primary School\" \"North Ealing Primary School\" ...\n $ Type         : chr  \"Primary\" \"Primary\" \"Primary\" \"Primary\" ...\n $ NumberBoys   : int  180 160 225 340 265 230 155 285 185 150 ...\n $ NumberGirls  : int  200 165 240 355 205 205 180 290 190 125 ...\n $ TotalStudents: int  377 329 465 697 471 435 335 573 373 273 ...\n $ OfstedGrade  : int  2 2 2 2 2 2 2 3 2 2 ...\n\n\nUsing the following code head() or tail() will display the first or last 10 observations, respectively, in the school_data data frame object:\n\nhead(school_data)\n\n                   SchoolName    Type NumberBoys NumberGirls TotalStudents\n1     Berrymede Junior School Primary        180         200           377\n2   East Acton Primary School Primary        160         165           329\n3     Oldfield Primary School Primary        225         240           465\n4 North Ealing Primary School Primary        340         355           697\n5    St John's Primary School Primary        265         205           471\n6    St Mark's Primary School Primary        230         205           435\n  OfstedGrade\n1           2\n2           2\n3           2\n4           2\n5           2\n6           2\n\ntail(school_data)\n\n                                       SchoolName    Type NumberBoys\n53           St Vincent's Catholic Primary School Primary        240\n54 Edward Betham Church of England Primary School Primary        230\n55                    Dormers Wells Junior School Primary        205\n56                          Grange Primary School Primary        415\n57                      Petts Hill Primary School Primary        125\n58                       Khalsa VA Primary School Primary        235\n   NumberGirls TotalStudents OfstedGrade\n53         260           498           2\n54         240           471           2\n55         200           409           3\n56         385           800           2\n57         130           254           2\n58         180           412           2\n\n\nYou can inspect the data frame object in a Data viewer by using the View() syntax. This should cause the Data viewer window to open showing the full dataset:\n\nView(school_data)\n\nThe dataset has 58 rows (primary school observations) and 6 columns (variables). You can use nrow, ncol and dim() functions separately to report the size of your data frame:\n\n# total number of rows\nnrow(school_data)\n\n[1] 58\n\n# total number of columns\nncol(school_data)\n\n[1] 6\n\n# full size of data frame i.e., total rows and columns\ndim(school_data)\n\n[1] 58  6\n\n\n\n\n\n\n\nOne can subset or restrict the data frame by specifying which row(s) and column(s) to keep or discard using this standard square bracket syntax dataframe[Row, Column].\nBreakdown of dataframe[Row, Column]code:\n\nThe bit in the code that corresponds to dataframe from dataframe[Row, Column] represents the name data frame object.\nWhere it states Row within the square brackets specifies the subsetting, or filter action to be carried out based on rows.\nWhere it states Column within the square brackets specifies the subsetting, or filter action to be carried out based on columns.\n\nLet’s take our school_data data frame as an example - if we select the first row (row number 1) and the first column (SchoolName), we have essentially filter out only the school name Berrymede Junior School Primary:\n\ndata11 &lt;- school_data[1, 1]\ndata11\n\n[1] \"Berrymede Junior School\"\n\n\nIf you select only the first row (row number 1) and do not specific any numbers for the columns, you will be filtering out the entire row for row number 1:\n\nrow1 &lt;- school_data[1, ]\nrow1\n\n               SchoolName    Type NumberBoys NumberGirls TotalStudents\n1 Berrymede Junior School Primary        180         200           377\n  OfstedGrade\n1           2\n\n\nIn the same vein, if you select only the column and do not specific any numbers for the rows, you will be filtering out the entire column (i.e., SchoolName variable) for column number 1 which is the list of all primary school names:\n\ncolumn1 &lt;- school_data[, 1]\ncolumn1\n\n [1] \"Berrymede Junior School\"                           \n [2] \"East Acton Primary School\"                         \n [3] \"Oldfield Primary School\"                           \n [4] \"North Ealing Primary School\"                       \n [5] \"St John's Primary School\"                          \n [6] \"St Mark's Primary School\"                          \n [7] \"West Twyford Primary School\"                       \n [8] \"West Acton Primary School\"                         \n [9] \"Mayfield Primary School\"                           \n[10] \"Beaconsfield Primary and Nursery School\"           \n[11] \"Coston Primary School\"                             \n[12] \"Downe Manor Primary School\"                        \n[13] \"Drayton Green Primary School\"                      \n[14] \"North Primary School\"                              \n[15] \"Ravenor Primary School\"                            \n[16] \"Selborne Primary School\"                           \n[17] \"Hambrough Primary School\"                          \n[18] \"Hobbayne Primary School\"                           \n[19] \"John Perryn Primary School\"                        \n[20] \"Southfield Primary School\"                         \n[21] \"Allenby Primary School\"                            \n[22] \"Blair Peach Primary School\"                        \n[23] \"Clifton Primary School\"                            \n[24] \"Dairy Meadow Primary School\"                       \n[25] \"Derwentwater Primary School\"                       \n[26] \"Durdans Park Primary School\"                       \n[27] \"Fielding Primary School\"                           \n[28] \"Gifford Primary School\"                            \n[29] \"Greenwood Primary School\"                          \n[30] \"Havelock Primary School and Nursery\"               \n[31] \"Horsenden Primary School\"                          \n[32] \"Willow Tree Primary School\"                        \n[33] \"Lady Margaret Primary School\"                      \n[34] \"Little Ealing Primary School\"                      \n[35] \"Oaklands Primary School\"                           \n[36] \"Perivale Primary School\"                           \n[37] \"Stanhope Primary School\"                           \n[38] \"Viking Primary School\"                             \n[39] \"Wolf Fields Primary School\"                        \n[40] \"Featherstone Primary and Nursery School\"           \n[41] \"Three Bridges Primary School\"                      \n[42] \"Montpelier Primary School\"                         \n[43] \"Tudor Primary School\"                              \n[44] \"Hathaway Primary School\"                           \n[45] \"Vicar's Green Primary School\"                      \n[46] \"Mount Carmel Catholic Primary School\"              \n[47] \"Our Lady of the Visitation Catholic Primary School\"\n[48] \"St John Fisher Catholic Primary School\"            \n[49] \"St Anselm's Catholic Primary School\"               \n[50] \"St Gregory's Catholic Primary School\"              \n[51] \"St Joseph's Catholic Primary School\"               \n[52] \"St Raphael's Catholic Primary School\"              \n[53] \"St Vincent's Catholic Primary School\"              \n[54] \"Edward Betham Church of England Primary School\"    \n[55] \"Dormers Wells Junior School\"                       \n[56] \"Grange Primary School\"                             \n[57] \"Petts Hill Primary School\"                         \n[58] \"Khalsa VA Primary School\"                          \n\n\nWhat if we wanted to filter the following rows numbered 2, 7 and 19 from the school_data data frame object as highlighted in the image below?\n\n\n\n\n\n\n\n\n\nWe can use the combine function i.e., c() to list those numbers in the square brackets:\n\nrows_filter &lt;- school_data[c(2, 7, 19), ]\nrows_filter\n\n                    SchoolName    Type NumberBoys NumberGirls TotalStudents\n2    East Acton Primary School Primary        160         165           329\n7  West Twyford Primary School Primary        155         180           335\n19  John Perryn Primary School Primary        230         230           460\n   OfstedGrade\n2            2\n7            2\n19           2\n\n\nLikewise, what if we wanted to filter the following columns numbered 1, 5 and 6 from the school_data data frame object as highlighted in the image below?\n\n\n\n\n\n\n\n\n\nWe can also use the combine function i.e., c() to list those numbers for the columns within that square brackets:\n\ncolumns_filter &lt;- school_data[ , c(1, 5, 6)]\ncolumns_filter\n\n                                           SchoolName TotalStudents OfstedGrade\n1                             Berrymede Junior School           377           2\n2                           East Acton Primary School           329           2\n3                             Oldfield Primary School           465           2\n4                         North Ealing Primary School           697           2\n5                            St John's Primary School           471           2\n6                            St Mark's Primary School           435           2\n7                         West Twyford Primary School           335           2\n8                           West Acton Primary School           573           3\n9                             Mayfield Primary School           373           2\n10            Beaconsfield Primary and Nursery School           273           2\n11                              Coston Primary School           450           2\n12                         Downe Manor Primary School           471           2\n13                       Drayton Green Primary School           354           2\n14                               North Primary School           419           1\n15                             Ravenor Primary School           610           2\n16                            Selborne Primary School           554           2\n17                           Hambrough Primary School           520           2\n18                            Hobbayne Primary School           641           2\n19                         John Perryn Primary School           460           2\n20                          Southfield Primary School           518           2\n21                             Allenby Primary School           263           2\n22                         Blair Peach Primary School           506           2\n23                             Clifton Primary School           400           2\n24                        Dairy Meadow Primary School           469           2\n25                        Derwentwater Primary School           708           2\n26                        Durdans Park Primary School           528           2\n27                            Fielding Primary School           891           2\n28                             Gifford Primary School           866           1\n29                           Greenwood Primary School           555           2\n30                Havelock Primary School and Nursery           434           1\n31                           Horsenden Primary School           872           2\n32                         Willow Tree Primary School           759           2\n33                       Lady Margaret Primary School           671           2\n34                       Little Ealing Primary School           669           2\n35                            Oaklands Primary School           552           2\n36                            Perivale Primary School           467           2\n37                            Stanhope Primary School           598           2\n38                              Viking Primary School           275           2\n39                         Wolf Fields Primary School           421           2\n40            Featherstone Primary and Nursery School           722           2\n41                       Three Bridges Primary School           455           2\n42                          Montpelier Primary School           682           1\n43                               Tudor Primary School           453           2\n44                            Hathaway Primary School           346           4\n45                       Vicar's Green Primary School           342           1\n46               Mount Carmel Catholic Primary School           457           2\n47 Our Lady of the Visitation Catholic Primary School           471           3\n48             St John Fisher Catholic Primary School           467           1\n49                St Anselm's Catholic Primary School           239           3\n50               St Gregory's Catholic Primary School           619           2\n51                St Joseph's Catholic Primary School           558           2\n52               St Raphael's Catholic Primary School           589           2\n53               St Vincent's Catholic Primary School           498           2\n54     Edward Betham Church of England Primary School           471           2\n55                        Dormers Wells Junior School           409           3\n56                              Grange Primary School           800           2\n57                          Petts Hill Primary School           254           2\n58                           Khalsa VA Primary School           412           2\n\n\nWhat if we wanted to filter on rows numbered 2, 7 and 19, as well as columns numbered 1, 5 and 6 from that school_data data frame object as highlighted in the image below?\n\n\n\n\n\n\n\n\n\n\nfull_filter &lt;- school_data[c(2, 7, 19) , c(1, 5, 6)]\nfull_filter\n\n                    SchoolName TotalStudents OfstedGrade\n2    East Acton Primary School           329           2\n7  West Twyford Primary School           335           2\n19  John Perryn Primary School           460           2\n\n\nNot too shabby! So far, you have been shown how to do some create subset of data by filtering rows and columns. Let’s take it up a notch on filtering based on row Logical Operators to create conditions.\n\n\n\nOften, we want to filter based on more than one condition — for example, “cities in England and with a population over 600000”. RStudio uses logical operators to combine these conditions:\n\n\n\n\n\n\n\n\n\nOperator\nMeaning\nExample\nDescription\n\n\n\n\n==\nEqual to\ncountry == \"England\"\nTrue if the country is England\n\n\n!=\nNot Equal to\ncountry != \"England\"\nTrue if for all except England\n\n\n&gt;\nGreater than\npopulation &gt; 600000\nTrue if population is above 600000\n\n\n&lt;\nLess than\npopulation &lt; 600000\nTrue if population is under 600000\n\n\n&gt;=\nGreater than or eqaul to\npopulation &gt;= 600000\nTrue if population is equal to 600000 or more\n\n\n&lt;=\nLess than or equal to\npopulation &lt;= 600000\nTrue if population is equal to 600000 or less\n\n\n&\nAND\ncountry == \"England\" & population &lt;= 600000\nBoth conditions are true\n\n\n|\nOR\ncountry == \"England\" | country == \"Wales\"\nTrue for either England or Wales\n\n\n\nLet’s illustrate with the school_data object. We are interested in primary schools with a total of 500 hundred or more students. This operation is always row-based. We will need to use the $ to call the column TotalStudents and the logical operator for this filter is &gt;=:\n\nschools_500plus &lt;- school_data[school_data$TotalStudents &gt;= 500, ]\nschools_500plus\n\n                                SchoolName    Type NumberBoys NumberGirls\n4              North Ealing Primary School Primary        340         355\n8                West Acton Primary School Primary        285         290\n15                  Ravenor Primary School Primary        315         295\n16                 Selborne Primary School Primary        275         280\n17                Hambrough Primary School Primary        275         245\n18                 Hobbayne Primary School Primary        340         300\n20               Southfield Primary School Primary        275         245\n22              Blair Peach Primary School Primary        265         245\n25             Derwentwater Primary School Primary        335         370\n26             Durdans Park Primary School Primary        275         250\n27                 Fielding Primary School Primary        480         410\n28                  Gifford Primary School Primary        435         435\n29                Greenwood Primary School Primary        290         265\n31                Horsenden Primary School Primary        440         435\n32              Willow Tree Primary School Primary        385         370\n33            Lady Margaret Primary School Primary        360         310\n34            Little Ealing Primary School Primary        345         325\n35                 Oaklands Primary School Primary        290         260\n37                 Stanhope Primary School Primary        305         295\n40 Featherstone Primary and Nursery School Primary        365         360\n42               Montpelier Primary School Primary        350         330\n50    St Gregory's Catholic Primary School Primary        305         310\n51     St Joseph's Catholic Primary School Primary        295         265\n52    St Raphael's Catholic Primary School Primary        325         265\n56                   Grange Primary School Primary        415         385\n   TotalStudents OfstedGrade\n4            697           2\n8            573           3\n15           610           2\n16           554           2\n17           520           2\n18           641           2\n20           518           2\n22           506           2\n25           708           2\n26           528           2\n27           891           2\n28           866           1\n29           555           2\n31           872           2\n32           759           2\n33           671           2\n34           669           2\n35           552           2\n37           598           2\n40           722           2\n42           682           1\n50           619           2\n51           558           2\n52           589           2\n56           800           2\n\n\nWhat if were interested in primary schools with an OFSTED score of 1 (Excellent). Again, this operation is row-based and so we will need to use the $ to call the column OfstedGrade and the logical operator for this filter is ==:\n\nschools_ofsted1 &lt;- school_data[school_data$OfstedGrade == 1, ]\nschools_ofsted1\n\n                               SchoolName    Type NumberBoys NumberGirls\n14                   North Primary School Primary        215         205\n28                 Gifford Primary School Primary        435         435\n30    Havelock Primary School and Nursery Primary        245         190\n42              Montpelier Primary School Primary        350         330\n45           Vicar's Green Primary School Primary        165         180\n48 St John Fisher Catholic Primary School Primary        225         240\n   TotalStudents OfstedGrade\n14           419           1\n28           866           1\n30           434           1\n42           682           1\n45           342           1\n48           467           1\n\n\nHere is an example of combining such logical operators - select schools that have more than 650 students and with an OFSTED score of 2.\n\n# logical operators is &gt;, &, ==\nschools_650_ofsted2 &lt;- school_data[school_data$TotalStudents &gt; 650 & school_data$OfstedGrade == 2, ]\nschools_650_ofsted2\n\n                                SchoolName    Type NumberBoys NumberGirls\n4              North Ealing Primary School Primary        340         355\n25             Derwentwater Primary School Primary        335         370\n27                 Fielding Primary School Primary        480         410\n31                Horsenden Primary School Primary        440         435\n32              Willow Tree Primary School Primary        385         370\n33            Lady Margaret Primary School Primary        360         310\n34            Little Ealing Primary School Primary        345         325\n40 Featherstone Primary and Nursery School Primary        365         360\n56                   Grange Primary School Primary        415         385\n   TotalStudents OfstedGrade\n4            697           2\n25           708           2\n27           891           2\n31           872           2\n32           759           2\n33           671           2\n34           669           2\n40           722           2\n56           800           2\n\n\nI am sure you now get the gist of what is happening here with these logical statements for subsetting, or filtering data accordingly. We are now in the final stretch - let us learn how to save and export a dataset as a CSV spreadsheet.",
    "crumbs": [
      "Core Content",
      "Introduction II"
    ]
  },
  {
    "objectID": "03-handling_data_structures.html#saving-your-dataset",
    "href": "03-handling_data_structures.html#saving-your-dataset",
    "title": "Introduction II",
    "section": "",
    "text": "This operation is very easy to perform. Once you have created your filtered data, you can use the following function write.csv() to save it as a new CSV file:\n\nwrite.csv(schools_650_ofsted2, file = \"Filtered_example_data.csv\", row.names = FALSE)\n\nThe above syntax should save a new CSV file named as Filtered_example_data.csv. Do not forget to save your R-script!",
    "crumbs": [
      "Core Content",
      "Introduction II"
    ]
  },
  {
    "objectID": "03-handling_data_structures.html#summary",
    "href": "03-handling_data_structures.html#summary",
    "title": "Introduction II",
    "section": "",
    "text": "You have learned the following:\n\nSet your working directory for Windows/MAC\nImport and explore data\nUnderstand rows and columns\nFilter data using numeric and categorical variables\nCombine filters with logical operators\nExport your results to a new CSV file",
    "crumbs": [
      "Core Content",
      "Introduction II"
    ]
  }
]